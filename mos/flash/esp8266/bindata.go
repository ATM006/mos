// Code generated by go-bindata.
// sources:
// data/stub_flasher.json
// DO NOT EDIT!

package esp8266

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataStub_flasherJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x58\xcb\xae\xe4\xc6\x0d\xdd\xe7\x2b\x2e\xee\x7a\x16\x7c\xd5\xcb\x3b\x89\x55\xfc\x0d\x63\x10\x7b\x69\x27\xb0\x27\x8b\x20\xc8\xbf\x07\x87\x25\xb5\x7a\x6c\x03\xe9\x45\x97\x54\x4f\x16\x79\x78\x48\xea\x3f\x9f\x7f\xff\xc7\x4f\x3f\xff\xf8\xfb\xb7\xaf\xbf\x7d\xfb\xfc\xe1\x83\xa9\x59\x1b\x64\x64\x5f\x3e\x72\xe4\xf3\x87\x8f\x4f\xea\x44\x44\x95\x68\x3f\x64\x1b\x4b\x83\x5f\xef\x7b\x9c\xed\x7a\xf7\x6b\xfe\xfd\x6e\xd7\xfc\xab\x3f\xa2\x05\x9e\xf8\xb5\x8e\x28\x42\x43\x38\x34\x82\xc5\x79\x91\x93\x10\x91\x74\x92\x96\xbd\x32\x88\x85\x83\x23\xe6\xa8\x3c\x39\x24\xa2\x1d\x4d\x7c\x34\x5e\xa3\x70\x0c\x63\x15\x6f\xe1\xf3\x98\xe2\x55\x07\xa4\xec\xd4\x6c\xf0\x1a\x11\x76\xf4\xde\xdb\x39\xa8\x18\x15\xaa\x54\xa8\x50\xb3\x8e\x09\x9d\xd4\xc8\xba\x53\x69\x87\x91\x58\x8e\x9c\xbc\x6a\x04\x39\xf5\x25\x07\xcd\xf3\x90\x83\x9c\x06\xaf\x23\xe2\x3c\x4e\xa1\x2a\x83\x08\x92\x46\x6c\x59\xad\x93\x7b\xc7\x7a\xa3\x66\x52\xd9\xf9\xe8\x7e\xba\x54\x71\x2b\xb5\x2a\xa6\x55\x59\x44\x56\x25\x6f\x7e\xb4\x61\x6d\x92\xb3\xd9\x20\xf1\x41\x93\x2a\x4f\xa2\xd5\x06\x36\x71\x31\xab\x7c\xec\x79\xe4\xd6\x69\x38\xe6\x56\x3a\x52\xc7\xd6\x2b\xd7\x54\x77\x27\xe5\x33\x3c\x06\xa9\x89\x79\xca\x52\xf9\x34\xec\x5b\xb1\xee\x7a\x1e\x54\x99\x89\x1c\x37\x72\x6f\x6c\x3c\xf2\x79\xe6\xf3\x49\xae\xaa\x83\x44\xd8\xfb\x7d\x2b\xed\x24\xd7\xd3\x80\xfc\x38\xd1\x53\x17\x30\xdc\x65\xee\xd4\x90\x6d\x29\x0c\x52\x40\xf4\x3f\x49\x71\x5e\xcf\x67\xde\x58\xa0\x04\x3e\x7b\xdf\x56\x2a\x8d\x3b\xf6\x9f\x25\xa2\xc0\x22\x3d\x91\x58\xc8\x8c\xcf\x1e\x61\xb8\x5b\x3e\x6d\x69\x7a\xc7\xf6\x69\x43\x5f\xa5\xf2\x29\x11\x83\xcf\x12\x51\x8f\x2a\x38\xd9\x1a\x24\xee\xf5\x5c\x11\xda\x81\x1e\xcc\xf1\xde\x78\xf6\xca\xab\x17\x8e\x6e\xfc\xdc\x0d\xb8\x13\xa2\x19\xfb\x52\x4c\xd4\x3a\x00\x6c\xb0\xed\x81\xf6\x84\xf4\x64\x84\x99\x41\x3e\x84\xe7\x60\x5e\x83\x78\x4e\x12\x1a\xca\x42\x42\xa7\xad\x49\xaa\x2e\x5e\xaa\x0b\x35\xcd\x3e\x75\xf5\x52\x4d\xa8\x11\x47\xc1\x2d\xf0\x53\x37\x2f\x75\x08\x55\x9f\xb4\xd6\x31\x67\xaf\xa4\x44\x42\xe2\xc6\x94\x78\xdf\x33\x4b\x3d\x84\xcc\x65\x3a\x40\x29\xd3\xc9\xbd\xba\x1f\x4b\x66\x62\x92\x2a\x1c\x4e\x48\x29\xac\xd4\xa9\x31\x7b\x8d\x33\xf2\x32\x90\x2a\x0a\xf1\xea\xf7\x6e\xcb\xbb\x4c\x72\x77\xec\xb5\x9c\xbc\xe9\x5c\xa7\x1c\xd3\xed\xbb\xf3\xd7\xeb\xfc\xe9\x26\xef\xa7\x97\x7a\x7a\x2c\xaf\x50\x9f\x7a\xf1\x9e\x68\x50\xaf\xd8\x21\x6f\xd6\x9c\xba\x32\x8e\x99\x9d\xd9\xbb\xf0\xea\xc4\xd0\x1d\xdf\x5a\xf6\x8b\x1f\xfa\x6e\xb5\x43\xed\xe9\x82\xc9\x0b\x35\xdb\x61\x11\xfb\x1e\x11\xf4\x18\x07\xff\x7d\xa4\x7d\x7a\x47\xbf\xd1\x71\xb5\x83\x16\xa3\x55\xdb\xe3\xe6\xdb\x7e\xcd\xf6\x78\xa7\xdd\x5a\x9f\xb1\xed\x3b\xd2\xae\xe3\x5e\x2f\x07\x63\x17\x66\xa7\x29\x95\x6d\xc2\xbe\x22\xce\xa5\xab\x54\xd6\x49\xe8\x0d\xc7\xff\x5a\xf8\xf7\xc0\xff\x09\xb7\x37\x21\x5e\xf3\xa5\x37\xd2\xb4\xbe\x48\xa9\xac\xd2\x44\x84\x75\xca\xd5\xab\x02\x62\x90\x4a\x1b\x9b\xdb\x9b\x26\x89\xba\x49\xa9\xc3\xa5\x04\x17\x89\x10\x9e\x47\x44\xe5\xd2\x22\xe4\x90\xa8\x83\x64\x71\xb1\x08\xa0\x19\xe3\xb6\x92\x0f\x63\x1d\x2b\x67\x28\xcf\x1a\x98\xd7\xd6\xe6\x96\xf0\x41\xcb\x26\x05\x79\x91\x0a\x39\x4b\xc3\x7f\xa5\xdc\x61\x9f\x2d\x3c\xe9\xdd\xf3\xf3\xb6\x4b\xd9\xe3\xd5\x9b\xfc\x60\x16\xa1\x72\x30\xf1\x8b\xfb\x44\x41\x3e\xf4\x36\x4b\x0e\x3c\xb3\xbf\x74\x81\x9e\x93\x74\x82\x30\xe0\x6e\x70\x25\x3f\x5e\x08\x07\x8b\x50\x39\x0a\xf4\xeb\xec\xdd\x64\x52\x29\x90\x11\xf3\x5e\x3e\x23\x9d\x56\x49\x19\xd8\xbb\xca\xe0\xf2\xcc\xb3\x52\x1d\xe8\x5d\x07\xe9\x9e\xd3\xf0\x5f\xfb\x69\x05\xd6\x52\x8f\x49\x4b\xa4\xb2\xc4\x9a\xd4\x7c\x52\x49\x9b\xa9\xd7\x52\x88\x34\x57\x1a\xd6\xe4\xdd\x8d\xb9\x86\x51\x81\x15\xa3\x4c\x20\x89\x53\x27\x91\xab\x68\xf3\xa9\xa6\x4d\xb1\x4a\xdd\x60\x3c\x52\x3e\x46\x84\xb4\x53\x85\x40\x0d\x61\xd3\x0f\x49\xdb\x07\x71\x6b\x8f\x57\x37\x61\xda\x2b\x85\x1b\xc3\xba\x06\x6e\x64\x85\x47\x15\xba\xf4\x26\x38\x8b\x6b\x3c\xeb\xb0\xa9\xec\x75\x32\x85\x49\x72\x0d\x40\x7a\xc9\x73\xf7\x37\xd5\x63\x6d\x8d\xa0\x5f\x56\xde\x8e\x0d\x14\x45\x72\x88\xa6\x36\xd6\x75\x73\x26\xbb\x2d\x2d\x9d\x42\x06\xbb\x74\x70\xf0\x78\xe1\xa2\x74\x8a\xd2\xd4\xa8\x03\xba\x61\x5e\xe5\x7c\xe5\x00\x55\x05\x9c\x8b\xd8\x28\x2f\x5d\x8a\x03\x1b\xfb\x34\xe3\xde\x81\x1d\xc4\xc1\x3c\xd9\xb7\x5f\x11\xf7\x07\x09\x97\x2c\x5d\x93\xb9\xd7\x24\x99\x42\x37\x12\x7a\x7d\x10\x03\x0b\x97\x5a\x84\xda\xdb\x0d\xe7\x94\x39\x19\x11\x3e\x6f\x58\x12\x1b\x32\x89\x3b\xbd\x7c\xec\xb9\xa1\x4c\x89\xfb\x7d\x10\xac\xe3\xef\x48\xdb\x5a\x8c\x76\x0a\xc8\xed\xb2\x07\x72\x83\x25\x83\x96\x74\x72\x4d\xf9\x2f\x6d\x0f\x02\x17\x02\xb9\x4c\xdc\xec\x41\xbe\xb0\xa9\xee\xde\x97\xa7\x83\x1b\x55\x0e\xe2\xde\x4b\x41\xba\x74\x59\x1c\x7c\xea\x95\x69\xf3\x69\xaf\x60\x25\xf0\xa9\x55\x5a\x7b\xbc\xbb\x57\x84\xe0\x7d\x3e\xd0\xa7\x90\x50\xa8\x1e\x2d\xc2\xd2\xcf\xf8\x30\x93\xa4\x71\xbd\x34\x5c\xf5\x75\xf2\xa3\x2d\x5c\xde\x95\x00\x9c\xed\x17\x72\xad\x4e\x2c\xa9\x97\xc2\xb8\xb1\xcd\xb4\x1a\xeb\xba\x3c\x3c\xe3\xf7\xed\xe3\x65\xbc\xdf\x29\x19\x22\x36\x8b\x3a\x9e\xd7\xc4\xff\x5c\xf8\xf7\xc0\xff\x39\x0e\xe6\x3b\xd6\xd6\xbe\xf9\xbc\x5c\x6d\xbb\xf8\xbd\xd9\xd5\xde\xfd\xce\x57\xf6\x79\xf1\xbf\xdb\xb9\xf9\x5c\x3d\x79\x9b\x63\xde\xf9\x63\xe5\x80\x97\x8d\xca\x6b\x18\xc7\x50\xa6\xd1\x78\x8e\xc2\x9b\xd7\xf9\xa8\x40\x69\xdd\x39\xa7\xcb\x64\xce\x3b\x83\xb9\x34\xb3\x4b\x72\x0a\x3e\x54\xcb\x20\x55\x56\x8e\x08\xa9\xce\xc7\x9a\x04\x32\x11\x6b\xa7\x02\xeb\x5a\xaf\x5b\xb3\xac\x87\x47\x57\x89\xb0\x8c\xcc\x72\x54\x86\x2d\xea\x20\xb3\x2a\x72\x8d\x5b\x44\xea\xb8\x93\x04\x4d\x71\x9a\xed\x5c\x99\x49\x2c\xcd\xac\xd2\x26\x4d\x9c\x2f\x9d\x2e\xe4\x2c\x79\xfc\x9f\x85\xc6\x24\x44\x12\x46\xea\x42\xc4\xf3\xc5\x0e\x58\x99\xd8\xca\x55\xfc\xf4\x33\xb2\x2b\x44\x12\xc8\x63\x1d\x13\x91\x98\x19\x4f\xd9\x7d\x55\x6a\x92\xda\xe4\x08\xa6\x5a\x3b\x55\x91\x4a\x54\x9b\x06\x8b\x66\x74\x60\x52\x84\x86\x4e\x4a\x6e\x6a\xc5\x80\x83\x6a\xc2\xcd\x2a\x2b\x4e\x01\xa7\x67\xb8\x3c\xee\x73\x84\x24\x9c\xac\xa9\x74\xb6\x1a\xf5\xca\x4b\x72\x8e\x34\x0d\x6d\x95\x5d\x9e\x55\x35\x8f\xae\x4d\xe5\xec\xc2\x27\xb0\x87\x98\x70\x08\xae\x7b\x3c\x5a\x3e\x71\x97\xa4\x5b\x8c\x9c\xaf\x9b\x02\x83\x3b\x93\x29\xae\x42\x99\xa5\xa4\xde\xdc\x64\xe7\x27\xc5\x8b\x0c\x3e\x5b\x44\x22\xb1\x37\xf6\x5e\x79\xf6\xc2\xab\x1b\x47\x57\x7e\xf2\xc1\xf3\xc2\x9b\x5f\xed\xbc\xf1\x97\x48\x1b\x1c\x6b\x23\x0d\xe8\x02\xda\x80\x34\x20\xce\x27\x02\x21\xd0\x96\x14\x36\xc9\x14\x39\xd8\x1a\xce\x06\xcf\xa9\x17\x86\xa8\xca\xc4\x6d\xe2\xc2\x84\x65\xde\x4a\xe9\x77\xc8\x00\x6f\x5c\x0a\x0f\x07\x9e\x02\x6c\x16\x04\x94\xac\xcb\xb2\x15\xb5\x95\x24\x8a\x81\xa1\xbb\x5f\xb2\xf6\x89\x4b\x77\xc0\x9a\xb7\xac\x5d\xb2\xba\x41\x5f\x74\x2c\xa3\x05\xac\x64\x76\xc0\xe3\x15\x69\xbb\x97\x8c\xe2\x55\xbd\x72\xdf\xfb\xf5\x33\x6d\xc1\x88\x38\x48\x97\x2c\x12\x7b\x7a\x9f\x78\x78\x9b\x5b\x8e\x67\x47\x8f\x47\x1e\x64\x25\xba\xbd\x2d\x77\x20\x60\xea\x19\xd5\x77\x7b\xf6\x97\x24\x71\xac\x15\x99\xaf\x96\x7a\x78\x74\xc9\xac\x42\xb9\x1d\x97\x76\x0e\x45\x2e\xd2\x9e\x9d\x7c\xbc\xef\xf4\xc6\xe9\x93\x7c\x64\x7d\xf3\xff\xed\x9e\x44\x49\x17\xe9\x67\x66\xba\xdf\x23\x76\x46\xba\xed\x9f\x7c\x37\x08\x0c\x01\xdc\xe7\x3f\xf2\x43\x6a\xc0\xc4\x15\x59\xa4\xea\x1d\x75\x50\xad\x09\xb9\x33\x95\x6a\x9e\x2b\xca\x7b\xce\xb5\x71\x20\xa0\x21\xc4\x13\x86\x97\xed\x78\xf2\xf0\x37\xe4\xce\x04\xbe\xd7\x37\x79\x37\xc8\xef\x20\x45\x5b\x4e\x30\x62\xdf\xf5\x75\x7f\xab\x5f\x90\x84\x55\xa6\xc3\x39\xc6\x25\xef\xf9\x8a\x8a\xae\xc9\x9e\x88\x0a\xf2\xc4\x46\x7f\xc9\xe8\xef\x32\x3e\xe3\xe4\xac\x70\x60\xe6\x5e\x04\xe8\x05\x4b\x5d\x0c\xd9\xc0\xfb\x62\x89\x1b\x62\x66\x42\xee\x76\x33\x28\x76\xe5\x75\xee\x13\x8f\xac\xfa\x8f\xbc\xc1\xe6\xb6\x8c\x91\x44\x85\x03\x19\x46\x17\x02\x96\x91\x77\x75\x9c\x34\x34\xc2\xaa\x34\xc4\x45\x06\xb6\xeb\x6d\xaf\xef\xd6\x4e\xac\x3d\x84\x90\xcf\x30\x56\x5a\x17\xee\xe5\xa0\x88\x5e\x39\x8d\x6d\xb9\x9e\xd7\x5f\xac\x3e\xb1\xfa\x14\x9a\xef\xab\x4b\x57\xb6\xe2\x8e\xf3\xb9\x81\x53\xf8\xaa\x90\xff\x62\x87\xf1\x57\xe7\x7b\x99\x13\xe7\x53\xdc\xf9\x71\x65\xaf\x34\x41\x50\xa8\x21\xac\x92\xdf\xb9\x15\x5d\x55\xf9\xf6\x77\x1a\x9b\xe5\xb6\x4e\x5f\x9a\x27\x2b\x48\x15\x2f\x1d\x57\x3a\x9f\xc5\x94\x28\xf2\x1c\x47\x05\x73\xbd\xc9\xfb\x3e\x7b\x0f\xec\x46\x39\xb2\xf7\x51\x71\x89\x43\x49\xa9\xd9\x59\x45\x49\xbc\x9e\x40\x4d\x3f\xd9\xfb\x91\x08\xd4\xa7\x72\x7e\x79\x8b\x85\x75\x63\x1b\xaf\xef\x45\x17\x0e\xf3\x7b\x0f\xe9\x3d\x1d\xe7\xb6\x9d\xf7\xb9\xbe\xba\xb2\x9e\x03\xcf\x1a\x80\x99\x75\x59\xe9\x9a\xad\x78\x7e\xe3\x20\xf7\xfc\x9a\x82\xb2\xb8\x66\xff\x66\xcb\xf4\x4a\x60\x08\x3c\x2c\x83\x59\x78\xc5\x66\xe8\xed\x4f\x24\xef\x35\xb8\xf0\xf2\x8c\xd5\x9e\x35\x4d\xba\x8e\x19\x8a\x13\xe4\xae\xc4\x5a\x6f\x56\x21\x0e\x7a\x5b\xd5\x90\x23\xb0\x3e\x15\x50\x61\x99\xb1\xfe\x58\x07\x19\x47\x8d\xa9\x19\xbd\x1b\x0b\x32\xc7\x3c\xa5\xa2\x7e\x22\x4a\x26\xbe\xb2\x52\xe0\xd9\xc3\x85\xe7\x0a\xf0\xbb\xbd\xc7\x33\x24\x63\x42\x1d\xe9\x18\xed\x7a\x90\xae\xaf\x4f\xdf\xa3\x0d\x8a\x02\x55\x79\xc9\x51\x58\x9a\xa7\x61\xf6\x7c\x45\xce\x5a\xab\x73\xd8\x29\xac\x19\xfb\x77\x4c\xb4\x53\xe4\xad\x9e\x6b\xc3\xa2\xfc\xb1\xf6\xd3\x19\xd4\xef\x2f\x3f\x99\x27\x3c\x8c\xf4\x3d\x1b\xd1\xf5\x9d\x24\xb9\x45\x89\xfd\x7c\xe9\xf1\x62\xd9\xfb\x3b\x40\x35\x3d\x1f\x5e\x5a\xa3\x33\x8d\x93\x7d\x1c\x3c\xc7\xe0\x48\x2b\x12\xeb\x60\x5e\xfb\xcb\x53\x72\xec\x53\x2d\xaf\x36\x24\x8c\x9c\xe6\x1e\x8f\xfc\x1e\xd5\xb7\x1f\x6d\xbb\x3d\x99\x38\xac\x4a\xab\xb1\x18\x45\x1b\xc2\x8e\xac\x17\x88\x58\xf1\x5d\x25\xea\xe9\xe1\x0d\x79\x56\xbe\xcf\x7c\x2e\x77\x8e\x6e\xc8\xaf\x3a\x74\x2a\x6a\x62\xf9\x2d\x6b\x4e\xf8\xb5\xb6\x31\xbd\xdc\xb5\x42\xda\x6e\x5e\x5f\xcc\x78\xbd\x18\xdc\x21\x73\x85\x07\xc9\xa4\x09\x2f\x9a\x7d\xf0\xea\x9d\xa3\xb7\x3f\x78\x14\xdb\xcd\xeb\x0d\x3c\xa2\x19\x7d\x10\x7f\x7c\xc9\xf7\xdf\xa3\x1c\xd4\x0c\xd2\x75\x27\x4b\x66\xef\xbb\x87\xa3\x47\xd8\xe1\xae\x64\x6c\x2c\x87\xd8\x6d\x97\x78\x55\xa3\x9a\x5e\x01\xeb\x80\x87\xdf\x99\xdd\xbb\xbc\x59\xec\xf3\xcb\xc7\xe7\xcf\xbf\x7e\xfb\xed\xdf\xaf\x0f\xc6\xd2\x86\x7c\xf9\xf8\xfc\xf5\x5f\xbf\xfc\xf8\xcf\xaf\xbf\x7d\xfd\xe5\x77\x8c\x7c\xf9\xf8\xdc\x2f\x7f\xfe\xba\x4c\x5f\x3e\x3e\x7f\xfa\xfa\xed\xeb\xe7\x0f\x1f\x9f\xc6\xd4\xc1\x16\x25\x76\xdb\xd6\x6e\xc7\xf5\x7e\x5e\xef\xde\x76\x3b\xe9\xfb\x76\xd5\xdd\x7e\x5e\x7b\xbe\x9f\xa6\xb5\x55\x65\xf9\xef\xdf\xfe\x17\x00\x00\xff\xff\x41\x12\x04\x5c\xe7\x16\x00\x00")

func dataStub_flasherJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataStub_flasherJson,
		"data/stub_flasher.json",
	)
}

func dataStub_flasherJson() (*asset, error) {
	bytes, err := dataStub_flasherJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/stub_flasher.json", size: 5863, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/stub_flasher.json": dataStub_flasherJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"stub_flasher.json": &bintree{dataStub_flasherJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
