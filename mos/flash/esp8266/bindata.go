// Code generated by go-bindata.
// sources:
// data/stub_flasher.json
// DO NOT EDIT!

package esp8266

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataStub_flasherJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x58\xbb\xd2\xe4\xc6\xcd\xcd\xff\xa7\xf8\xea\x8b\x37\xc0\xad\x6f\xca\x48\x74\xe3\x35\x54\x5b\xbf\x14\x4a\x76\x49\xeb\xc0\xe5\xf2\xbb\xbb\x0e\x9a\xe4\xcc\xae\x1c\x78\x02\xf6\xb0\xaf\x68\xe0\xe0\x00\xe0\xbf\x3e\xff\xff\x6f\xbf\xfc\xfa\xf3\x9f\xdf\xbe\xfe\xf1\xed\xf3\xa7\x0f\xa6\x66\x6d\x90\x91\x7d\xf9\xc8\x91\xcf\x9f\x3e\x3e\xa9\x13\x11\x55\xda\x3f\xb4\x9d\x62\x69\x50\xef\x57\xdf\x6e\x23\x5a\xa0\x65\xdf\xf3\xf8\x9a\x2f\x1c\x3d\xa2\x70\x8c\x08\x27\x21\xa2\xd1\x49\x34\x7b\xf7\x18\x8b\x73\x90\x0f\x65\x39\xa4\xe8\xa1\xc5\x2b\x0d\xc2\x01\xba\x57\x9c\x9d\x0e\x3e\xbd\xfb\x20\x3d\xc5\x7a\x8e\x09\x9f\xbd\xf7\x41\x82\x79\xd2\xb4\x13\x97\x41\xca\xa7\x99\x51\xa7\x66\xbd\x71\x23\xc3\xcc\xde\xce\x3a\x9b\xf1\xf2\x5b\x86\xd6\xc9\x1a\x35\x6a\x36\x9c\x5a\xe5\xd5\x23\xac\x93\x58\x53\x9c\xed\x64\x07\x2f\x89\xf0\x1a\x25\xf2\x5e\xc2\xab\x46\x78\x57\xbe\x6e\x31\x48\x20\x39\x13\xcd\xb8\x34\x81\x4b\xb7\x0e\xf9\x8c\x88\xec\x40\x7b\x9a\x0d\xb4\xf7\x2d\x85\xe7\x60\x5e\x83\x78\x4e\x12\xc2\xad\x49\xe8\xb4\x35\x49\xd5\xc5\x4b\x75\xa1\xa6\xd9\xa7\xae\x5e\xaa\x09\x35\x62\xc8\x91\xaa\x25\x75\xf3\x52\x87\x50\xf5\x49\x6b\x1d\x73\xf6\x4a\x4a\x24\x24\x6e\x4c\x1c\x7c\xcf\x2c\xf5\x10\x32\x97\xe9\x41\x4e\x32\x9d\xdc\xab\xfb\xb1\x64\xf2\x3a\x22\xa8\xc2\xa0\x42\x4a\x61\xa5\x4e\x8d\xd9\x6b\x9c\xd7\x7d\x49\x28\x0a\xa5\x66\xf6\x6e\xcb\xbb\x4c\x72\x77\xec\xb5\x9c\xbc\xe9\x5c\xa7\x1c\xd3\xed\xbb\xf3\xd7\x73\xfe\x74\x93\xf7\xd3\x4b\x3d\x3d\x96\x57\x28\x50\xbd\x78\x4f\x98\xa8\x57\xec\x90\x37\x6b\x4e\x5d\x19\xc7\xcc\xce\xec\x5d\x78\x75\xe2\xef\xf4\x6c\x1b\x6f\x62\x50\xb7\x65\x0b\x9c\xd5\x6c\x87\xd1\x85\xbf\x88\x7d\x8f\x08\x8a\xc7\x38\x78\xf6\x91\xf6\xe9\x1d\xfd\x46\xc7\xd5\x0e\x5a\x8c\x56\x6d\x8f\x9b\x6f\xfb\x35\xdb\xe3\x9d\xae\x79\xd7\xfc\x44\x00\xde\xe5\x20\xa7\x41\xcc\x4e\x2e\x95\x65\xf9\x24\x91\x49\xac\x78\x63\xc2\x33\x26\x9e\x73\xe1\xe9\x81\xe7\x69\x78\x56\xe2\xb5\x6e\x6d\x39\x69\xda\x5c\xa4\xd4\xa5\x1c\x22\xc2\xc2\x72\xf5\xaa\x94\xaa\xca\x41\x7c\xda\xa3\xdf\x49\xa2\x6e\x52\x6a\x9d\xbc\x82\xbb\x47\x2c\xee\x0b\x9e\x85\xff\x85\xe7\x11\xb1\x8e\x15\xe5\x28\x21\x87\x84\xf2\x1c\x11\x31\xa8\xc4\x20\x99\x83\x96\x4d\x0a\xf2\x22\x05\xf2\x34\xa0\xf2\xde\x5d\x78\xda\xed\x2f\x0a\x9f\xc5\x0c\x51\x9e\xfa\xf4\x0e\x12\xe1\x29\x11\x2a\x07\xd3\xe5\x19\xf0\x23\x25\x35\xa1\xb7\x59\xf8\x9b\x33\x2f\x0c\x4f\x9a\xe2\x64\x22\xce\xa5\x13\x4f\x7a\x4e\xed\xb4\xc8\xbb\x8a\x54\x86\x0e\x9c\x5b\x87\xf6\x78\xf5\x52\x13\x65\xeb\x20\x2d\xd0\x4d\x4b\xad\x52\xce\x1c\x13\xbe\x30\xa9\xf4\x6a\x9a\x30\xc9\x79\xa9\xc3\x9a\xba\x2e\x0c\xdc\x55\x68\x39\x8a\xc3\xbe\xdb\x42\x9a\xa3\xe6\x14\x14\xd6\x2b\x5f\xae\xac\xa9\x7d\xc3\x13\x28\x53\x07\xb5\x94\x08\x69\xa7\xb2\x4f\x1f\xdb\x3e\x4a\xdc\xed\xe5\x6f\x2a\x7c\xad\x11\x6e\xb0\xc3\x61\x96\xfb\x93\x55\x2a\x79\x3f\x8c\x1a\x71\xf3\xd7\xaa\x29\x14\x79\x1e\xa9\x4c\x65\xd2\xeb\x5e\xc2\xbc\xae\xdd\x64\x02\x4a\x4d\xed\x94\xad\x01\xcc\xe7\x9e\xa3\xc5\x40\x1d\x24\x87\x6c\xad\x75\xcd\x19\x5b\xfb\x02\x2c\x92\x31\xcc\xbe\x75\x7a\xf5\x77\x9a\xd2\x4e\x8b\xb6\xf7\xc3\x4e\x5c\x61\xb7\xbd\x93\xf1\x38\x22\xb4\xd3\xca\x55\x15\x88\x26\x1e\x8f\xd4\xb1\x57\xf1\x28\xd7\xac\x49\x4e\x3c\xc6\x77\xdc\x33\xde\x64\x6d\x60\x02\xa6\xa0\x92\xb2\x96\x02\xc4\x71\x23\x1e\xf6\xf2\x80\x47\x32\x99\x12\xf7\xfb\xa0\x49\x3c\xbe\x43\xc8\xd6\xc7\x6c\xa7\x90\xf4\xba\xd1\x2a\x33\x42\x06\xc6\xa0\xb7\x8d\xa1\xd4\x5a\xa2\x67\x23\xa9\x97\xc2\x74\x69\x76\x5b\x58\x73\x0f\xab\xe7\x88\xd8\x28\x7d\xd9\x53\xb8\x59\x44\xea\x58\x74\x3e\xf8\x06\x9e\xc5\xb9\x76\xe2\x16\xcf\xdc\xd7\x4d\x87\x6e\xc0\x27\x2e\xc5\x01\x25\xa0\xbc\x17\x9b\xfb\x92\x9b\xaf\xd5\x8b\xd8\xc5\x85\x55\x9e\x90\xb9\x79\x10\x26\x67\x89\xcd\x2e\x8e\xff\x6b\xe2\x39\x17\x9e\x1e\x78\x9e\xe3\x60\xbe\xa3\x4f\xed\x7b\x79\xb9\xda\x76\x6d\xd7\xec\x6a\xef\x7e\xe7\x2b\x6a\x5f\x7c\xe8\x76\x6e\x7e\x53\x4f\x3e\xe3\x98\x3b\x26\x2f\xaa\x1c\x2d\xc2\x47\xe5\x35\x8c\x63\x28\xd3\x68\x3c\x47\xe1\xcd\x77\x7c\xd4\x2a\x83\xaa\x70\x80\x13\x64\x32\x13\x1f\x22\xf0\x78\x10\x58\xc0\x84\xc1\x87\x2a\x22\xb3\xb2\x81\x94\xa5\x3a\x1f\x6b\x92\x15\x17\xb1\x76\x2a\xf4\xa1\x88\x43\x89\x20\xf3\x97\xf6\x57\x89\xb0\x8c\x54\x72\x54\xe6\xc3\xac\x0e\x32\xab\x22\xd7\xb8\x45\xe0\x3c\xe9\x24\x91\x84\x32\xdb\xb9\x32\xb2\x2e\xe5\x45\x11\x36\x69\xe2\x7c\xe9\xa4\x9a\x08\x5e\xf2\x42\x28\x0b\x8d\x49\x3a\x85\x18\xf8\x21\xe2\xf9\xd8\x13\x2b\x21\xd1\x5e\xa5\x0f\x2b\x1a\xcf\x12\x01\x5e\x85\x3c\xd6\x31\xb1\xa2\x49\x76\x4b\x19\x05\xb1\xa8\xf2\xe4\x08\xa6\x5a\x3b\x55\x91\x4a\x54\x9b\x06\x83\x3f\x09\xfd\x0a\x4a\xed\xa4\xe4\xa6\x56\x74\x11\x81\xa7\xb8\x59\x65\xc5\x29\x8e\x5b\x03\x38\xc7\x7d\x8e\x90\x84\x93\x35\x95\xce\x56\xa3\x5e\x71\x3a\xe7\x48\xd3\xd0\x56\xd9\xe5\xb5\xaa\xe6\xd1\xb5\xa9\x9c\x5d\xf8\x9c\x11\x3a\x09\x73\x85\x58\xfa\x4b\xcb\x27\xee\x02\x7a\xcb\x91\xf3\xd1\x00\x90\xba\x23\x7b\x71\x05\x3e\x65\x77\x17\x37\xd9\xf1\xba\x78\x91\xc1\x67\x8b\x48\x24\xf6\xc6\xde\x2b\xcf\x5e\x78\x75\xe3\xe8\x9a\x91\x5b\x32\x72\x9f\x17\xde\xfc\x6a\xe7\x8d\xbf\x44\xda\xe0\x58\x1b\x69\x40\x17\xd0\x06\xa4\x01\x71\x3e\x11\x40\x80\xb6\x35\x49\xe6\x24\x53\xa6\x1a\x31\x1c\x44\x7b\x50\xbd\x30\x44\x60\x28\x64\x9b\x17\x26\xe0\xa5\x3b\xbf\x90\xcc\x88\x6e\x5c\x4a\x72\x98\x1c\x81\x2c\x23\x08\xe7\xae\xcb\xb2\x15\xb9\xab\x24\x8a\x89\xe3\xbc\xfb\x85\x17\xc8\xf3\xd2\x1d\xb0\xe6\xe0\x8c\xba\x33\x42\xf4\x45\xcf\x88\xbf\x80\x95\x8c\xa7\xc9\x8a\x7b\x75\xf7\x22\x29\xa7\x7a\xe5\xbe\xf7\xeb\x67\xda\x82\xc1\x4d\x48\x27\x2c\x80\xbd\xe0\xfb\xc4\xc3\xdb\xdc\x72\xbc\x76\x5c\xf3\x25\xcf\xac\x88\xb8\xe9\x6d\xb9\x43\x66\x11\xaf\x51\x7d\xb7\x67\x7f\x24\x89\x63\xad\xc8\xfc\xad\xd4\xc3\xa3\x0b\x3b\x30\xc1\xed\xb8\xb4\x73\x28\xfc\xa3\xbc\x76\xf2\xf1\xbe\xd3\x2b\x62\xc1\x2f\x06\x7b\xff\x5f\xec\x9e\xd4\xf8\xd4\x0f\xc8\xd8\xf6\x7b\xc4\xce\xd0\xb6\xfd\x81\x35\x19\xc4\xca\x71\x64\x5d\x80\xec\x54\x2a\x53\x03\x26\xee\x48\x86\xf8\xbf\xff\x3b\x72\x7e\x72\x67\x2a\x15\x8c\x21\x57\x7e\x7c\xe7\x2a\x1b\x07\x02\x1a\x42\xfc\x60\x78\xd9\x8e\x60\x55\x1f\x7c\xf7\x96\x99\x26\x64\x7f\x93\xd7\x91\x33\x6a\xf4\xb7\xbc\x1d\xd7\x3d\x98\xc6\x09\x1d\x38\xdc\x8b\x99\x9c\xb5\x97\x94\x2b\x83\xb5\x55\x15\xc8\x48\xcc\xec\x62\xcc\x74\xd6\x9e\xd1\x49\x9c\x48\x53\x3e\xc4\x85\x03\x5e\x2f\x07\xdd\xde\x44\x17\xf7\xa8\x1c\x00\x6b\x81\x32\x2a\x56\x02\x6b\xc8\x8e\x3b\x33\x95\x01\xef\xc8\x6c\x5d\x9d\x81\xeb\xf2\x5f\xd7\x3a\xd6\x1e\x42\x4b\x3a\x31\x56\x1a\xac\x5c\x8e\xe4\x12\xc8\xe4\x95\x91\xd5\xe2\xb2\x15\x3c\x0f\x9d\xc0\xc2\x56\xd0\x5f\xeb\xf9\xc3\xda\xd2\x95\xad\x38\x2c\x55\x11\x0b\xe0\xf3\x38\xff\xae\x8a\x7e\x38\xbf\x5f\xe7\xfb\xf7\xe7\x83\x89\xa9\xae\xb4\x77\xfa\x02\x5b\x5d\x33\x82\x4a\x20\xaa\xd7\x75\xd5\x1c\xd8\x70\x3e\xd5\x83\x57\xd4\x1e\x89\x8c\x94\x1d\x1a\x4f\xdd\x93\x15\x70\xe4\xd6\x35\x55\x6a\xb7\x26\xf7\x28\xe6\x31\x8a\x06\x48\xf4\xd8\x44\xc5\x25\x0e\x25\xa5\x66\x67\x95\x64\x0c\x07\x87\xf6\x93\xbd\x1f\x89\x00\x7d\xaf\xe5\x2e\xb4\x5a\x58\x37\x06\x16\xae\xba\xf7\xc2\x07\x1b\x72\x20\x7d\xe4\x46\x76\x96\x9c\x48\xae\x4f\x57\xd6\x17\x9c\xd9\xe8\xe9\xbb\x6e\x28\x5d\xb3\x15\xb7\x8c\xb7\xee\xb2\x76\xbd\x81\x18\x61\x37\x5b\xa5\x57\x00\x29\xe0\x41\x19\xcc\xc2\xd0\x1f\xbc\x61\xe3\x19\x99\xca\xab\x26\x94\xac\x6d\x77\x85\x0b\x6b\x00\x5e\x66\x8e\x7d\x81\x22\xae\x76\x7b\x35\x71\xd0\xdb\x2a\xd8\xd4\x59\x5f\x99\x7b\xe1\x72\xc6\xfa\x31\x7f\x37\x16\x0b\xc4\x54\x89\x68\x5c\x2c\x96\xe4\x29\x15\x79\x3f\xf8\xa7\x3e\x56\xeb\x8c\xda\xc3\x85\xe7\x0a\xf0\x96\xbd\xc7\x13\x27\x75\x81\xfd\x36\x53\x1d\x39\xe3\x91\xe7\x85\x26\x28\x2a\x8b\xac\x92\xeb\x67\xd6\x19\x86\xd9\x58\xb3\x67\xd7\x5a\x9d\xc3\x4e\x61\xcd\xd8\xbb\x63\x12\x12\xe4\xb7\x3a\xa4\x0d\x8b\xa2\xec\xf1\x5e\xb3\xe8\x0c\xea\x77\xbe\xf5\x86\xb8\x9b\xc9\xde\xd9\x6b\xd7\xed\xc9\x45\x4a\x3c\x9f\xa8\x40\x17\xcb\xdd\x75\x69\x35\x3d\x5f\x7c\xb1\x46\x4f\xbe\x00\x6f\xcc\x31\x38\xd2\x8a\xc4\x8a\xda\x3f\x73\x3a\x4a\x8e\xbb\x74\x36\x49\x56\x1b\x12\xa8\x5e\xe7\x1e\x0f\x39\x68\x9e\xbd\xd2\xbc\x11\x16\xaf\xbc\x14\x56\xa5\xd5\x50\x48\x44\x1b\xc2\x8e\x5c\x13\x88\x58\x4f\xf4\x2e\x58\xef\xe9\xc3\x0d\x79\x4e\xbe\xcf\xfc\x5f\xee\x5a\xc4\x90\xdf\xa0\xfa\x42\xbe\x2f\x86\x20\x74\xce\x09\xbf\xd5\x36\xa6\x17\xaf\x8f\x2b\x38\x4d\xbf\xe4\x5e\x0f\x83\x3a\x64\xae\xf0\x20\x99\x34\xe1\x45\xb3\x0f\x5e\xbd\x73\xf4\xf6\x17\x8f\x6a\x48\x1b\x95\x7d\x09\xf4\x34\xbb\xfe\xf0\x5d\x64\x5b\x39\x10\x1b\xc9\xd8\x92\x54\x3b\x11\xb2\xce\xeb\xeb\x11\xed\xca\x51\x76\xa6\x18\xfd\x65\x37\xcd\x6f\x05\xef\xf6\xf8\xfc\xf2\xf1\xf9\xeb\xef\xdf\xfe\xf8\xe7\xf3\x61\x4b\xb4\xd3\x97\x8f\xcf\xdf\xff\xf1\xdb\xcf\x7f\xff\xfa\xc7\xd7\xdf\xfe\xc4\xc8\x97\x8f\xcf\xfd\xf2\xd7\xaf\x60\x98\xfc\xcb\xd7\x6f\x5f\x3f\x7f\xfa\xf8\x3c\x0b\x55\xb0\xc1\xd4\xdd\xc6\xd5\xb2\x52\x43\xab\x72\xb5\xe7\x6e\xcd\xbe\x6f\x3f\xaf\xbd\xde\x4f\xd1\xda\x10\xd0\xfe\xfd\x7f\xff\x09\x00\x00\xff\xff\x43\x32\xdc\xf2\x87\x13\x00\x00")

func dataStub_flasherJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataStub_flasherJson,
		"data/stub_flasher.json",
	)
}

func dataStub_flasherJson() (*asset, error) {
	bytes, err := dataStub_flasherJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/stub_flasher.json", size: 4999, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/stub_flasher.json": dataStub_flasherJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"stub_flasher.json": &bintree{dataStub_flasherJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

