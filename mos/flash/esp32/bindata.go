// Code generated by go-bindata.
// sources:
// data/stub_flasher.json
// DO NOT EDIT!

package esp32

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataStub_flasherJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x59\xcb\xae\x2d\xb9\x6d\x9d\xe7\x2b\x2e\xce\xb8\x07\x24\x25\x52\x94\x67\x94\x54\xfa\x0d\xa3\x11\x7b\x68\x27\x68\x77\x06\x41\x90\x7f\x0f\x16\x55\xbb\xf6\x3e\xd7\x9d\x20\xf7\x02\xa7\xaa\x54\x2a\x3d\xf8\x58\x5c\x4b\xfb\xbf\xbe\xfe\xf5\xdf\xfe\xf2\xd7\x3f\xff\xe3\xf7\x5f\x7f\xfb\xfd\xeb\x4f\x3f\x98\x5a\x2d\x85\x4d\xe5\x97\x1f\xf9\xe6\xeb\x4f\x3f\xbe\x88\x9c\xf6\x2a\x7b\x6f\xda\x44\x44\xc5\x2a\x13\x0d\xde\x6b\xef\x90\x35\x2a\x75\x8f\x68\xe4\x9d\xb9\x47\xf7\x41\xde\x07\x75\x67\x1f\xbc\xfb\xde\xbd\x95\x41\x17\x8f\xd1\x47\x67\xef\xe1\x2e\x52\x9d\xdc\x7d\x04\x0f\x77\xef\x23\x78\x6d\x4c\x43\xbb\x96\x9c\x03\xd7\x42\x3b\xe7\x25\x67\xca\x7f\xf3\xb4\xf3\xeb\xfa\xea\x97\xeb\x11\xde\xbe\xf7\x24\x21\xa2\xea\x24\xc2\x57\xdf\x5b\x65\x49\x25\xb2\x62\xf4\x1a\xc3\x9c\x77\xdd\x7b\x38\xc9\xe9\x1d\x4e\x1e\xd4\xa9\xd5\x61\x3a\x48\xdc\x64\x11\x39\x6f\xda\xdb\xc9\x47\x90\x67\x0f\xac\xcf\x25\x68\x92\x37\xee\xd9\xcf\x31\x22\xbb\x77\x12\x34\x7b\x1f\x3a\x4d\xf4\xf4\x5b\xc3\x5b\xef\x54\x69\x16\x77\x13\x21\x9a\xe7\x6b\x0f\x9d\xad\x77\xd9\xd8\xbd\x18\x56\x5b\xed\x5e\x9d\x7b\x0f\x45\x8f\xe0\x8b\xf7\x6e\xb0\x23\x7b\x78\x17\x72\x1f\xe8\xd1\x7b\x67\x8f\x70\xef\xb0\x22\x5a\xb5\xb7\xee\x54\xc8\x68\x61\x90\x8e\xd5\x18\x2b\x91\x19\x0f\x2e\x8d\xe2\x8c\x11\xc1\xcb\xf6\x3e\x23\x7d\x8c\x60\x74\xe1\xbb\xa0\xa0\x56\x45\x37\xef\xfd\x1a\x0b\xff\x72\x2f\x13\x7b\xe6\x9e\xf7\x2b\xef\x07\xcd\x5a\x4a\x87\xa5\xe7\x7a\x59\xbe\x3c\x56\x2d\x69\x21\x0a\xa2\xc8\x5d\x93\xd1\xed\xc6\x48\xdb\x5c\x7a\xad\xbd\x69\x4a\x5a\x8f\x87\x99\x91\x21\xfc\xda\x30\x7c\x39\x63\x6f\xe3\x29\x1f\x23\x5b\xa1\x42\xad\xaa\x45\xd9\x2c\x3c\xe9\xf1\x37\x46\x58\xfb\x5e\x6f\xa3\x4b\x36\xba\x4c\xc9\xf8\x38\xff\xd6\x16\xfa\x7c\xa6\x72\x7a\xeb\xa4\xbb\xfd\x3c\x57\xa2\x2a\x1f\x71\x15\xbc\x6d\xef\x4b\x11\x84\x9d\xb7\xee\xed\xd9\xf2\xc4\x4e\x47\x70\x30\xfa\xd5\x57\xab\x77\xea\xe7\xae\x3b\x8c\xbf\x05\x91\xd4\x3b\x23\xaa\x38\xa3\xaa\x23\x60\xee\xbe\xd1\x4f\xac\xf1\xb5\x5f\x23\xf4\x4e\xfe\x8c\xe0\x6a\xad\xef\x1d\x7c\x3d\x76\x96\x4e\xf1\xd8\xd9\x65\x51\x7f\xef\x3f\xf3\x67\x21\x7f\xea\xcb\x83\x67\xa7\x78\xec\x95\x90\x10\xd8\x9f\xe5\xeb\x5e\xd3\x1a\xdf\x7a\x12\xbd\x7c\x85\xbb\x36\x57\xe0\xe3\x3a\x27\x8c\x43\xd7\xb4\x96\x76\x72\x73\x5c\x15\xbd\xac\x52\xbf\xfb\x4d\x9f\x82\x76\x9e\x6b\xe0\x79\xdf\xfd\x8b\x19\x93\x84\x4c\x56\x17\x31\x2e\xb3\xe2\xef\x3e\xf9\x78\xe5\xe4\x55\x84\xcb\x2c\x53\xa4\x52\xa5\x51\xd5\x6a\x95\x28\x79\x5f\x66\x11\xb5\x59\xa5\x8b\x76\x78\x6a\x51\x60\x0c\x35\x09\xe9\xca\x36\xf6\x9e\x99\x35\x63\x51\x28\x85\x0a\x79\xa2\xc0\x19\x7b\xf2\xda\xb0\xe2\x9a\x7b\x63\xbc\x7c\xab\xaf\xb7\x23\xdb\xe7\x22\xa5\xa9\xe1\x7c\x95\xd7\x1b\xe1\x15\x7b\xcb\x7c\x59\xdc\x9c\xc4\xb0\xf2\x65\xbc\xda\xcb\x23\xd6\x49\x2c\xd7\x20\x12\x4c\x7c\x5a\x9b\x88\x21\xbe\xa4\xbd\xfc\x2d\x1d\x08\xb4\xfc\x35\x3a\xb2\x61\xd0\x58\x54\x65\xd6\x19\x11\x2c\xc8\x8f\xea\xbc\xe4\x59\x41\x08\xf3\xf4\x89\x5e\xb1\x48\x9c\xe7\xf5\x7a\x67\x12\xb4\xc9\xc2\xd0\x63\xe0\xad\x75\x16\x51\x5d\x48\xb9\x2b\xa8\xe4\x5a\x01\x06\xd7\x71\xe8\x69\xad\x4f\x86\x7b\x66\x52\xa5\x56\x26\xb5\x36\x9c\x47\xa4\x17\x82\x1a\xed\xba\xa6\xb4\xc1\x63\xee\x6d\x7a\xb5\xbd\xd5\x3c\xb8\x35\x1e\x63\xef\x16\xb5\x56\x7b\xc2\x8c\x06\x0f\xc4\x69\x7e\x2d\x7a\x19\x7a\x5b\xb0\x55\x59\x95\xc9\xd1\xbe\xd5\x9a\x53\x69\xb9\x06\xb4\xc8\x36\x32\x9f\xd4\xc8\xcc\x09\x6b\x95\x1d\xf7\xba\x97\x32\x19\x2c\x58\xdc\x59\x2d\x00\xa3\x4b\x85\xcc\x31\x6e\xcf\xa7\x42\xee\x0d\x9f\x2a\x50\xb2\xcb\xd2\x8a\x4a\x24\x6d\x51\x77\xef\xdd\x0d\x66\x6f\x0e\x17\xac\xc6\xd4\x5a\xa9\xae\x64\xef\x5c\x1b\x1e\xcd\x1b\x0f\x32\xb3\x6a\x34\xab\xd5\xdc\x11\x9e\xae\xe5\x56\xe5\xb5\xbf\x63\xb9\x86\x55\xc3\x3a\x6d\xc2\xee\x2d\xd7\x3c\x3f\x6c\x7d\x35\xb8\x98\x3d\x9a\x05\x8b\xef\xad\xb0\x2b\xf9\xd8\x6d\x39\xb7\x88\xd6\x9a\x50\x43\x78\x58\x13\x6f\xec\xb1\xf7\x60\x1f\xc0\x43\xbe\xe6\xa2\xdd\x28\x9a\x90\x8b\x31\xc2\xdd\xb8\x16\xe7\xfe\x44\xe4\x5a\x14\xb0\x1d\xde\x09\xd7\x62\xc0\x59\xd4\xa3\x0b\x99\x4f\xed\x58\x17\x7e\x90\x35\x60\x75\x8c\xb9\x80\xf9\x93\x5a\xb4\x18\x8b\xf6\xc9\xc3\x86\xb5\xaf\xcf\x79\x16\xfe\xf2\xc6\x5f\x72\xf6\x27\x3f\xee\x31\xf3\xef\x48\xbf\x8d\x40\xd5\x6f\x18\x33\xbd\x76\x7a\x2c\xac\x88\x37\xfe\xd2\x89\x04\xcc\xbd\x69\x00\x7f\xb5\x4d\xa2\xcf\x95\x9f\xde\x6a\x25\xc8\x46\x7e\x3f\x31\xf6\xe5\x61\xa6\x64\x36\x00\x8e\xd6\xa8\x4d\x14\xee\xde\x47\xda\xce\x58\x2e\x1e\xcd\x4c\xa6\xed\x65\x14\xad\x17\xcb\xb9\x74\xfa\x5c\x61\x96\x7e\x98\xc8\xd4\xe8\xbd\xaf\x58\x36\x63\x70\x2c\xe2\x85\xba\x94\x79\x7a\xe7\xfd\x22\xf6\x11\x68\x8b\x57\xdb\x2b\x93\x2e\x85\xef\x27\x0a\x13\x95\xa9\xe2\xc6\x82\x3b\x93\x6a\xcc\xb8\x6b\xa8\xb4\xc0\xa2\x49\x19\x02\xc9\x8f\xa6\xcb\x3b\xbb\x4c\x50\xf9\x4f\x55\x9b\xe6\x3b\xf1\x81\x06\x31\x89\x38\x8d\xf4\x42\xc8\x14\xae\xce\xfa\xac\x40\xd2\x16\x05\x7b\xba\x11\xa2\x90\xc8\xa4\x21\x41\x52\x39\x22\x12\x41\xe9\xd2\xb2\x92\x37\x48\xe1\xaa\x7b\x27\x7e\xae\x37\x56\xd5\x4e\xc5\x59\xe9\xd9\x59\x56\x89\x03\xee\x76\xf3\x2a\xbd\xaf\xed\x6e\xaf\xd4\xcb\xc1\xeb\xca\xc2\x96\x3c\xaf\xc9\x62\x26\x86\x57\x3a\x59\xe7\xdd\x10\xab\x04\x3b\x37\x0e\x9d\xe2\xb5\x8d\xc3\x89\x94\x28\x16\x35\xe7\xf2\x20\x6f\x35\xb6\x93\x3f\x5e\x26\x39\x69\xb5\x02\xa4\x85\xed\x61\x67\xd1\xd6\x89\xd4\x26\xa2\x60\x91\xc2\x4f\xa7\x1a\xde\xc8\xfd\xee\x8b\x71\x9f\x3c\xd0\x10\xd1\x30\x2b\xad\x18\x6d\x65\x20\x0e\xcd\x3a\x34\x82\x4d\xc1\xf9\xc4\x6a\xb0\x51\x7a\x4b\xf9\xaa\x7b\xbb\x48\xe3\xe0\x50\x55\x60\x06\xb9\x4d\xd2\x56\xc0\xad\x2c\x77\x45\xa7\x87\xb7\x62\x72\xf7\x2e\xad\xf8\x9c\xc1\x6b\x64\x6d\x69\xb0\xbf\xb3\x3c\x55\x2b\xb2\x0e\xf0\xa4\x71\xde\xbc\xd1\x1d\x8c\x8e\xec\x70\x0d\x4d\x1e\x08\x23\xeb\xac\x7e\x18\x9f\x4e\x45\xf5\x76\xf8\x65\xdc\xf6\x2f\x36\xd3\xee\x73\xec\xed\x33\xaa\x4a\x90\x49\xbd\x79\x91\x64\x0d\x06\x28\x29\x4f\x30\xdc\x50\xd8\x05\x4e\x1c\x1f\xf6\x6e\xa8\x2c\xf0\x99\x33\x3d\xab\x31\x6a\xc5\x4a\x23\x84\x2d\xd3\x60\x30\xa2\x10\xe4\xa5\x81\xf1\x4e\x8b\x9c\xab\xcc\xfc\x3e\x09\xe9\xa2\x76\x5b\x1e\x33\xbc\x77\x3c\x5b\x7d\xde\xbd\xe6\xa1\xb7\x3d\xe0\x89\x71\x62\x06\x4c\x13\xbc\xe7\xda\xd7\xf3\xb6\x7c\x5a\x6b\x3c\x75\xae\x85\x48\xa3\x52\x26\xa9\x5d\x65\xf7\xc1\x31\xb3\x62\xaf\xbd\x47\x0c\x3e\xfd\xb7\xbe\x47\x5a\xfd\x73\xa4\x78\x22\x4e\x17\x15\x59\xa4\x27\xde\xcb\x07\xbf\x63\xf2\xfb\xf9\xe6\x81\x87\x97\x64\x0e\x39\x6f\x54\xfa\x4e\x2c\x79\x07\x72\xf7\x51\xb7\x1d\x88\xfc\x3c\x27\xf3\x13\x61\x52\xab\x92\xac\x50\x4f\xf4\xbd\x79\x9b\xf3\x2e\x7b\x67\x34\xa3\x26\x81\xeb\xb1\x73\xaf\xdf\xb3\x51\xe8\xad\x7b\xf0\x70\xd3\xd5\x5d\xeb\xd1\x3f\x25\x13\x15\xa8\xa1\x5a\xce\x0a\xa5\x32\xdf\x0c\xc3\x9d\xca\xd1\x3e\x34\x79\x08\xc9\xe7\x8a\xcb\xb7\x3e\xba\x13\xf5\x19\x7e\x77\xfe\xe8\x75\x29\x34\x95\x18\x3f\x55\xc4\x85\x98\xb9\xcd\x2d\x34\x52\xaf\xc1\xc3\xe4\xa9\x91\x1c\x1c\xdf\xa4\x81\x19\x5d\xe3\xe8\x09\x7c\x98\x1a\x49\x80\x9e\x04\xf4\x64\x51\x0e\x20\x23\x8b\x58\x9c\x91\x61\x66\x17\x1e\xce\x1c\x4e\x6c\x00\xbc\x3d\xd3\xfc\x40\xb6\x8c\x16\x16\x32\x65\xf8\x70\xb2\x98\x8d\x30\x5f\x5e\xf8\xf3\x3b\x51\x64\xe2\x34\xea\xdf\xbf\x0b\x05\xce\xc0\x52\xc6\x66\x11\x75\x3c\x5f\xc1\x51\x24\x0a\xbe\x37\x93\x11\x98\x82\x73\x57\x7b\x33\xdd\x4b\x6b\x41\xd6\x60\xaf\xd3\x68\xbc\xda\x31\xde\x99\x07\xb1\x3e\x19\xc8\x8d\x3e\x97\x72\xfa\x05\x96\xea\x1f\xdc\xfb\x63\xff\x02\x55\x35\x42\xde\xfb\x3a\x2a\x4f\xce\x08\xf0\xd8\x19\x31\x14\xda\xfa\x8c\xe5\x32\x65\xc7\xcb\xda\x92\xd6\x9e\xbc\xf7\x37\x86\xdf\x2b\xd5\x5d\xbd\x72\xed\x4c\x92\xd9\xaa\x34\x13\x67\xda\x3c\xbc\xdc\x20\x37\x0d\x7c\x5c\x06\xae\xc5\x8b\xe4\x15\xfc\x87\xc0\xe7\x5d\x1e\x5e\x4e\x47\xd5\x48\x72\x71\x9a\x14\x88\x55\xcc\x7d\xda\x1f\x34\xc3\xce\xc6\x27\x63\xcf\x3d\x9c\xb6\x07\x97\x37\x37\xdd\xd7\x4a\xa4\x9e\xdc\x6c\x5f\x23\xff\x5e\x60\xc6\x94\xa3\xf3\xf5\x30\x58\x86\x3f\x38\x18\xec\xd2\xf9\x9a\xef\x1a\x38\x52\x34\x53\x88\xb6\x96\xb8\x51\xb3\xc7\x83\x67\xe9\x93\xfa\xf2\x3d\x84\x48\x24\xeb\x0c\x30\x66\x3a\xb8\xe1\x7c\xbd\x79\xb4\x99\x00\xc7\xa0\x11\xde\x19\x58\x68\x9e\x73\x86\x5b\x37\xc9\xbc\xf3\xee\x6e\x7f\x74\x20\xf4\x41\xe6\x5f\xda\x81\xe6\x9c\x34\x09\x7c\xc5\x59\xe7\x0b\x93\x38\x73\xd1\x14\xd9\xd6\xd3\x76\xd0\xcc\x7b\x43\x13\xde\xfa\xb1\x1f\xb5\x76\x9f\xa3\x2c\x2a\x87\xd3\x33\x7f\xc7\x85\xa8\xfd\xc3\x3f\xf5\x9c\x1d\x64\x35\xbe\xd1\x7c\x51\xd4\xd6\x63\xd7\x12\x45\xea\x02\xc3\x45\x1f\x70\xd8\xc3\xeb\xf7\x63\x29\x5f\x14\x0d\x95\x6c\x69\xaa\x6f\x6d\x3d\x38\xa2\x13\xeb\x51\xf7\xa9\x51\xef\xbe\x4e\xac\x8d\x83\x3c\xdf\xad\xbc\xaf\x94\x3c\xdf\x17\x99\x0b\xf8\x31\x8f\x8a\x1a\x54\x27\xd5\xd6\xcb\x44\x65\xbb\x4b\x06\xa9\xdc\x6b\x7d\x7b\x4a\xb0\x4e\x7b\x23\x72\x86\xf0\x4b\xa7\x7f\xd3\xdf\xe4\x83\x84\x33\x4e\x6f\x5c\xce\xf3\x15\x3e\xd8\x0c\x08\x26\xde\x73\x79\xe4\xd9\xd2\x40\x75\xbb\xe6\xc1\x3f\x3b\xf2\xf5\xc6\x3c\xb1\x78\xdd\x4f\xb1\xf1\xba\xef\x4e\xe3\xe8\xe9\xb7\x42\x5f\xae\xd2\xa9\x2f\x86\xee\xe6\xee\xc4\xd4\xae\xbe\xc2\x4f\xe5\x9e\x3a\x6e\x46\xb2\x3e\x6d\x44\xed\xf2\x7d\xee\x50\x3b\x3a\x95\xb3\x37\x2c\x32\xeb\x8b\x97\xfb\x1c\xe1\xce\xaf\xcf\x53\x12\x2f\x60\x74\xd0\xb7\x25\x6b\x47\x3c\xef\x40\x0b\xe9\xf5\x16\x19\xf4\x59\xa9\x4d\x0f\xf3\x62\xf0\xc0\xe2\xe5\xc4\xd1\xab\x7e\x81\x13\x26\x2a\xd3\x5e\xaf\xca\x8e\xa8\x4d\x35\xbb\x0a\xf2\x67\xbd\x4f\x0d\xde\x6b\x51\x6b\x25\xcf\x62\xa0\x0a\xe5\x54\xc9\xf7\x9c\xa1\xc8\x6c\x4f\x04\xf5\x46\x70\xd4\xfc\x3c\x6f\xf1\x6f\xfe\x7b\xc4\x92\x9c\xf8\xae\xa4\xc4\xd5\xa7\x28\x56\x8d\xaf\x94\xe7\xdc\xcb\x45\x94\x2a\x14\xdf\x25\xf5\x68\xbf\x56\xfc\x9a\x47\xb7\x9b\x22\x73\x78\x42\x1c\xca\xcd\x45\x42\xe1\x65\xb5\x1e\x7b\x1d\x56\x13\x3c\x71\x4f\x2e\x4c\xb5\x85\xc9\xd5\x93\x35\x76\x72\x17\xea\x1f\xe7\x25\x27\x1a\x0a\x45\x91\x3c\xcf\x22\x6f\xa8\x63\x31\x9c\xa2\x8e\xb8\xd9\xf2\xe8\xd4\xeb\xe8\xbd\xc8\x2c\x92\x82\xfc\x02\xeb\x46\xcd\x37\xca\x03\xca\x5e\x89\xcf\xe8\xef\xd3\x9b\x4a\x41\x5c\x6b\x9e\x5d\xf0\xf0\xea\x79\x96\x58\xa9\x52\xab\xbe\xa8\x77\xa8\x76\xea\xde\x8b\xe7\x49\x42\x5d\x54\x2a\xb9\x4f\x78\xb9\x07\xbd\xf8\x61\x9e\x26\xd5\x1a\xfd\xf6\x4c\xe4\x6a\x6a\x45\x7e\x6d\xc4\x58\x75\x8e\xd8\xab\xf3\xaa\x7f\x70\x4e\x94\x71\xa3\x66\xe0\x84\x69\x43\x51\x60\x69\x40\xc8\x89\x1b\x18\xea\xa9\x64\x2f\xcf\xbd\x70\x0d\xf6\xbc\xf4\x82\x06\x95\xa0\xa2\xb7\x95\xd8\x1f\xfe\xed\x22\x85\x48\x56\x1e\x95\x42\xd9\x3e\xb1\xfe\xf1\xaf\xde\xe3\x2d\x12\x53\x64\x3e\x10\x49\xd8\x13\xb3\x7b\xf9\x88\x3c\x91\xcc\xdd\x37\xaf\xba\xef\x5e\x3b\x90\xbd\x2b\x45\xcd\x1d\x18\xbc\xf9\x0a\xb4\x77\x9c\x55\x7a\xf1\x36\x61\x97\x57\xb4\x87\xa2\x42\x60\x05\xe0\xa5\x57\xc6\x4b\x59\x24\x88\x3c\xc4\x0d\xd5\x0a\xf6\x80\xe2\x40\x02\x1d\x85\xd5\x16\xf0\xbd\x4b\x51\x25\x84\xdb\xb5\x57\xe5\xb6\x5f\xab\xad\x62\xf2\x42\x8e\x9a\x4a\x4e\xcd\xea\xde\xc7\x46\xa2\xa8\x24\x92\x71\xe6\x1f\xd1\x06\x62\x88\x91\x7f\x3a\xe7\x93\x71\x66\x07\x8f\xc8\xf8\x86\x96\xf3\xf2\x93\x3f\x72\xcc\x53\xc1\x34\x19\x59\x61\xb3\xbd\x30\x5e\xe8\xa9\x68\x76\xa2\x60\xe7\x5e\xcb\xcf\x91\xf0\xce\x68\xd1\x35\x6f\xde\x70\xe7\x1e\x3d\x76\x33\xd4\xac\xa5\xf9\xf7\x3e\xab\x72\x32\x25\x6d\x4c\x0d\x4a\xf4\x6e\x85\xde\x7b\xce\xbd\x9a\xb2\xfa\x5e\x50\xe6\x4c\xaf\x7b\xb5\xd7\x1e\xb5\x67\x0f\xa0\x4f\x58\x6d\xce\x6a\x6d\x34\x14\xd8\x33\x7b\xf3\xaa\x8d\x54\x2e\xc1\x3c\xd0\x5d\xa3\x92\xcf\x45\xf5\x55\x05\x8f\x9a\x56\x9a\x2a\x54\x68\x94\x37\x06\x61\xe7\x6a\x1e\x98\xd1\xeb\xa4\x86\x0c\x12\xd4\x40\x4a\x7d\x0e\xfd\x0a\x5d\x53\x68\x8c\xc8\x93\x13\x30\x3a\xf0\xc4\xac\x67\x36\x62\x0f\x1e\x66\x2d\x54\xcf\x49\xb3\xd2\x90\xca\x12\xa1\xd0\x7a\x6b\x2b\xcd\x3a\xef\xef\x45\x57\xd6\x79\x06\x09\x48\xac\xed\x1f\x11\x7f\x20\xf2\x16\x10\x37\x3a\xdd\x17\x6a\x53\xee\xf3\xe3\x6b\x7c\xb6\x2b\x8d\x8f\x67\x7c\x68\xf7\x73\x79\xb5\xbf\xae\x87\xc5\x91\xcc\x0f\x5c\xad\xaf\xf8\x50\xee\x40\xb8\x8f\xb3\x62\x77\x04\x0a\xf8\x54\x07\xb1\x22\x85\x7a\x59\x8d\xb9\xee\xdd\x5b\x0f\xb5\x8f\x7e\xa9\xfa\x9f\x13\x4b\xfd\x36\x42\xdb\x79\x16\x87\xdc\xe7\xc7\xff\xef\x5e\x86\xb8\x62\xfe\xf0\x3f\x72\xe6\x27\xff\x7b\x9e\x6c\xdd\xda\x24\xe5\xb5\x04\x34\xd6\x68\xcd\x48\x95\xa9\xe1\x7f\x85\xff\x3f\xbf\xb2\x44\xc6\x2c\x03\xb4\xda\x05\xde\x69\x55\x3f\x6a\x36\x56\xde\xff\x79\xe5\xf9\x26\xf1\x10\xef\xe5\xe3\x7d\x6b\xdb\x5f\x7a\xd9\x73\x4d\x88\x88\xbd\xae\x19\xfe\xde\x75\x03\xab\x9b\x8d\xda\x63\x95\xf6\x8c\x9d\xf9\x80\xca\x3c\x95\x5a\xc3\x7e\x67\xcd\xfd\x7e\xae\xdc\x8c\x67\x6a\x0a\xa5\xcf\xd5\x3a\xc3\x41\x3f\xe5\xff\xdb\xda\xa6\x78\x3d\x15\x68\x4a\x9a\xa7\xa6\x4a\xea\x9f\xe3\xfa\x77\x3b\x5a\x4b\x3b\x42\x8d\xb5\xb4\xe3\xd1\x07\xe7\xab\xc6\x83\x5f\xd1\xf0\x73\xbe\x8e\xf4\x51\xfa\x4b\x82\xc6\xf8\x39\x5f\xdd\xca\xad\x74\x34\xf5\xb3\x71\x40\x7b\xc2\x7a\x6e\xa9\xbf\xaf\xf4\xc7\xb9\x7f\xdb\x37\xad\x3e\x95\x89\x3f\xe2\xd0\xce\x7a\xf2\xec\x7a\xfe\xc1\x7a\x5c\x79\x11\xf6\x7d\xe2\xe7\xdc\xff\xdf\xf1\xd3\x10\x39\xb9\xf7\x13\x39\x27\x8a\x7e\x8e\x9f\x79\x7e\x5f\xfb\x5f\xe3\xdc\x72\xd4\x35\x8b\x3d\xbe\x55\xe3\xb1\x20\x06\xad\x7d\x8b\xab\x47\xf9\x7d\xcb\x8d\xba\xaf\x93\x1b\xef\x9e\xce\xc3\xf6\xfc\x79\xbd\xf4\xff\x5a\x6f\x5a\x73\x2a\x14\xf6\xfe\x8e\xbe\xf0\x66\x8c\x3f\xb4\x5e\x53\x0e\x7f\x5b\xef\xdc\x63\x6b\xc6\x6f\x3e\x7b\x30\xd8\xf6\xa7\xaf\x82\xfb\xda\x53\x42\x81\xc9\x61\x59\x81\x14\xc8\x0c\x1d\x3f\x81\x93\x11\x59\xa5\xf7\x9e\x17\x37\xd9\xbb\xcc\xad\x33\x9f\x97\x04\x90\x6e\x91\xdb\xa2\x6b\x9e\x7c\xa2\x26\xcc\xb5\x85\x96\xd9\xcf\xef\x2e\x39\xd7\x7a\x7e\xf7\x6a\x9d\xe6\x33\xff\x7b\x87\x5b\xad\x35\xf0\xb6\xd1\xf7\x05\xcc\xef\xa9\xde\x9b\xf9\xf3\x7b\x56\xbb\x19\x59\xeb\x34\xea\x18\x03\x5c\xac\x9e\x1f\x47\x92\x8b\x55\xaa\x60\x34\x40\x61\xd4\xae\xfd\xf3\x7c\xeb\xa3\x62\x5f\x02\x3c\x79\xce\x6b\x50\x15\x93\x5b\xd8\x07\x5f\x03\x5a\xeb\xc3\xd7\xa0\x50\x74\x51\xad\xa8\xd0\x97\x91\x4a\x2f\x02\x8e\x40\x35\x6b\x43\xd1\xa0\x79\x73\x64\xd8\xf3\xf1\xbb\x6a\x27\xa9\x43\x44\x92\xad\x9d\x73\x85\xc3\xbd\xaa\xad\x7e\x4e\x4b\x65\x91\x7d\xf0\x66\x3f\x3a\x7c\xce\xfc\x35\xeb\xc6\xf7\x4f\x85\x37\x29\x82\xb9\xd0\xe0\xca\x11\x63\xa0\x36\x81\x8d\x06\x98\x65\x72\xa8\x4f\xbd\xf8\xf5\xcb\x8f\xaf\xbf\xfe\xfd\xf7\xdf\xfe\xf3\xf9\x21\xbf\xb8\xf8\x2f\x3f\xbe\xfe\xfe\x1f\x7f\xfb\xf3\xbf\xff\xfa\xdb\xaf\x7f\xfb\x07\xde\xfc\xf2\xe3\xeb\x3c\xfc\xd3\xaf\xfe\x15\x9d\xff\xf2\xeb\xef\xbf\x7e\xfd\xe9\xc7\x97\xc7\x39\x65\xe8\xd7\xf7\x2b\x55\xe2\x73\xfa\x70\xae\x8c\x52\xdc\x2b\x95\x76\xae\x5a\xce\xd5\xf6\xb9\x36\x3f\x57\xaf\xdf\xaf\xfd\xfe\xee\xeb\x9e\xf3\x73\x35\x05\x49\x49\xf5\xbf\xff\xe5\x7f\x02\x00\x00\xff\xff\x66\x4a\x9f\x9d\x9f\x20\x00\x00")

func dataStub_flasherJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataStub_flasherJson,
		"data/stub_flasher.json",
	)
}

func dataStub_flasherJson() (*asset, error) {
	bytes, err := dataStub_flasherJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/stub_flasher.json", size: 8351, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/stub_flasher.json": dataStub_flasherJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"stub_flasher.json": &bintree{dataStub_flasherJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
