// Code generated by go-bindata.
// sources:
// data/stub_flasher.json
// DO NOT EDIT!

package esp32

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataStub_flasherJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x7a\xcb\x8e\x2f\xb9\x6d\xf7\xfe\x7b\x8a\x83\x5e\xcf\x82\xa4\x48\x8a\xf2\x8e\xba\xbd\x86\x31\xf8\xec\xa5\x9d\x60\x3c\x59\x04\x41\xde\x3d\x20\x55\x55\xff\xea\x33\x88\xe3\x3e\x40\xd7\x45\x2a\x89\xe2\xe5\xc7\x1f\xd9\xe7\xbf\xbe\xfe\xff\xbf\xfd\xe5\xaf\x7f\xfe\xc7\xef\xbf\xfe\xf6\xfb\xd7\x9f\x7e\x20\x54\x2e\x05\x55\xe8\x97\x1f\x39\xf2\xf5\xa7\x1f\x5f\x60\x00\x9b\xcb\x86\xb8\xb9\x7e\xf6\x2c\x1b\xdf\xcf\x5c\x36\xf2\xf5\x3c\xae\xf9\xf7\x33\x5f\xf3\xaf\xf7\x7b\xd7\x1d\xaf\xf1\xf5\x5d\x8c\x17\x55\x04\x20\xdc\xb4\xb7\xe1\x2e\x7b\x0f\x20\x00\x20\x03\x9a\xf9\x96\x1a\x20\xe5\xc8\xf4\x69\x9d\xc6\xdc\x83\x9c\x6c\x68\x31\x80\x02\x05\x2a\x0b\xae\xbe\x37\x7b\x29\xa5\x76\x01\x61\x18\xa0\x30\x60\xc4\xd1\x0c\x26\x1b\x74\x86\x52\x06\x8c\xea\x05\xa8\xe4\xc8\xc6\x65\x7b\xc3\x80\xa5\xe4\x30\x3b\x93\xc3\x80\x82\x6b\xec\xbd\x7d\xdb\x50\xaa\x00\x82\x8b\x6e\xa9\xdc\x40\xc4\xc0\x1c\x1c\x2a\x93\xa2\xa0\xdb\xe8\x42\x4a\xc2\xa4\x5a\x04\x08\x94\x26\x00\x28\xe6\x79\xb9\x36\xaf\x06\x03\x6b\x6d\x60\xd2\x80\x86\x62\x0f\x7d\x91\x68\x45\x57\x8b\x19\x30\xc4\xa0\x8c\x41\xc2\x0a\x7e\xe9\x53\x40\x51\x01\xc4\xa0\x63\xaf\x52\x1b\x74\x27\x96\x7c\xd3\xb0\x8b\x48\x83\x16\xdf\x5d\xf7\xc5\x42\x95\x20\x71\x96\x21\x15\x1d\x5b\xde\xcf\xbc\x77\x18\x85\xa8\x81\x11\x0e\xbf\xcf\x53\x0c\xe8\xba\x3b\x92\xc9\xf9\x7e\xc0\xd0\x63\xc6\x5c\xa1\xfb\x91\xc1\x43\x06\x21\xf6\x3f\xc8\xb0\xaf\xfb\x0d\x03\xe3\x6a\xd8\xd7\x5a\xb0\xa0\xf2\xaa\x38\x80\x58\xa7\xee\x1d\x76\x08\x7b\x94\xda\x18\xa4\x60\xef\x7b\x17\xd2\x0e\x70\xee\x1f\xa9\xca\xb1\x90\x8d\x35\x62\x9b\xbd\x05\xbb\xed\xdd\xbc\x19\x1b\x34\xae\xa1\x69\xd3\xbe\xf7\xa6\x1c\x2f\x06\xf8\x39\x09\xce\x0d\xaf\x1f\x04\x28\xca\xe1\x67\xc0\xd0\xd9\xc8\xa1\x90\xe8\x66\xd0\x02\xed\x7e\x53\x44\xb5\x81\xba\x34\x05\xc8\x37\x5c\x9c\xa8\x0d\x70\x4e\x4b\x38\xf8\x60\x44\x40\x24\x70\x71\x03\x10\x45\x07\x2e\x34\xcb\x86\x02\x4e\x03\xc6\xe0\x10\xdd\x20\x6d\x11\xdf\x30\x6c\x8e\xbd\xf6\x64\x5c\x6b\x6f\xd3\x10\x33\x3c\x68\x8b\x4b\x5b\x00\x6b\x14\x3f\xde\x79\xd6\x28\xb5\xf0\x5a\xcf\xbc\xc1\xa8\xe2\x02\x30\x07\xfb\x7b\x2f\xd1\x55\xf6\x62\xdd\xb8\x77\x19\x62\xa6\x79\xd2\xa1\xc6\x69\xbd\x32\xaa\xd1\x04\x4b\x6d\x8c\x2b\x2e\xed\x5c\x23\x76\xa0\x31\x10\x9f\x78\x54\x86\x7c\xb1\xf7\x4e\xd5\xed\x0d\xfb\x51\x1e\x00\xd4\x31\x3d\xe2\x6a\x0d\xad\x19\xdc\xa6\x16\x57\x1e\x83\xe3\xda\xae\xf1\x0e\x67\x7c\xf0\x75\xb5\x41\x71\xc5\x31\x7b\x8c\xef\xeb\xfb\x8c\x7b\x2a\xa4\x58\x86\xd3\x40\x31\x82\x02\x9d\x75\x02\x45\x60\x31\x94\x41\x64\x18\x67\x5b\x09\x42\xa2\xa5\x50\x21\x22\x2c\xe3\xcc\x2d\x23\xac\x68\xf1\x4e\xac\x01\xf0\x04\x2f\x83\x49\x74\x39\x61\x45\x6d\xe1\x1d\x0b\x03\x59\x74\xed\x4d\x4e\xd5\x1a\x90\x60\x38\x0e\xe1\x5c\x7b\x17\x54\xdd\x61\x88\x5a\xbc\xd4\x8e\x73\x7e\xe6\x79\x83\xea\x0d\x32\xb6\xc6\x84\x0a\x43\xdc\x42\x36\x0c\x95\xde\x72\x15\x9c\xf5\xf6\xdc\x66\x50\x5a\x9c\x69\x36\x0c\x7f\xbf\xde\x36\x28\x0d\x65\x84\xaf\x3b\xde\x7e\xea\x06\xad\x40\x71\x82\xc7\x6f\x1b\x0d\x70\xc3\xc9\xf7\xda\x4e\x0e\x1d\xfa\x04\x0e\xd7\x72\x77\x2c\x11\x8f\x61\xd2\x47\x2f\xc5\x0b\xe2\xb0\x11\x9e\x1d\x7a\xf1\x42\x60\x38\xe6\x3d\xde\x0c\x04\x87\x75\x9f\x50\x5a\xc3\xe2\x22\x0c\xd0\x60\xf9\x91\x95\xf6\x50\x4e\x9c\x8f\x37\x0a\x6d\x30\xc6\x29\xcb\xca\x93\x6c\x85\x0a\x5b\x12\x4e\xe3\x2c\xa9\x7f\x06\x6b\x23\x00\xc0\xf7\xb6\xda\x1b\x56\x05\x4b\x3f\x47\x03\xac\xe0\x35\x22\xc4\x02\x3d\x75\x38\x6c\x43\xdb\x7b\x1b\x30\x5b\x20\x4b\xf8\x75\xac\xb3\x5d\x6c\xc5\x9c\xed\xb0\x98\x26\x23\x18\x11\x32\x88\x56\x03\xaa\x29\x51\xbc\xa1\x95\xfb\xae\x06\x66\x03\x2a\x54\x33\xa8\x21\xfb\xf2\x33\x07\x69\xdc\xda\xae\x44\x92\xa7\xb6\xda\xb0\x54\xf4\x7a\xc7\x9c\x59\xac\x36\x0d\xc1\x6a\xe1\xd6\x40\x3f\xf9\xc6\x0c\xc4\x6a\xa9\x50\x55\x4b\xdb\x6c\x91\x12\xf2\x27\x9e\x03\x6b\xc8\x00\x5e\x12\x8d\x6e\x40\x7e\xe4\xf1\x6a\x29\xcd\xa8\xd8\x7c\xef\xe3\xcf\xe1\x31\x86\xed\x63\x87\xfc\x36\xbe\x8a\x11\x9f\xa0\x2d\x7d\x89\xc4\xf6\xd1\x2b\xa3\xa8\x38\xd4\xd7\x2e\x53\x69\x2a\x42\xfb\xbe\xcf\x34\x6c\xe5\x5e\xf7\x3a\xb5\x81\x54\x9a\x75\xdf\xcf\x0d\xe4\x68\xfd\xcc\x4a\x7d\xd2\xac\x08\x52\x7b\x8d\xb4\x14\x99\x2a\x82\xbb\x21\xf8\xde\xad\x01\x55\x83\x22\xc3\xc6\xf0\x8e\x67\xae\x4f\xc0\x1a\x99\x05\xad\xde\x2b\x21\xf4\xc0\x3f\x1a\x05\xcc\xd0\xe4\x79\x7f\xf9\x98\x4b\x20\x2d\x2b\xc8\xc1\x20\x89\xbc\x92\x77\x4a\xa6\x81\x2a\x65\x54\x62\x85\x75\xc6\x8d\x46\xfa\x56\xb5\x73\xe6\x32\x2c\x24\x24\x50\x9f\x7b\xb7\x8c\x00\xf4\xd6\x7a\x6a\xd5\x69\x34\x04\xc3\xaa\xf7\xbe\x94\xda\x2a\xa1\xad\x7d\xe2\xa5\x00\x45\x56\x1b\xd0\xd1\xdd\x29\x7d\x7c\x49\x19\x99\x55\xa9\xa0\xe2\xde\x1c\x3b\xcd\x88\xb7\xa3\x2f\xce\x53\xea\x78\x4e\x73\x65\x10\xb5\x83\x7f\x72\x5d\xeb\x85\x87\x1c\xc1\x9b\x38\xc6\x48\xb1\xe2\xdc\xbb\xd2\x8c\xec\xe0\xaa\xd2\x40\x1b\xca\x61\x17\xaa\x14\x99\x5e\x06\x19\xd7\x7e\x7c\x49\x20\x74\x5b\x0d\xe5\xd1\xdf\xc9\x31\x0a\x56\x22\x7d\x08\x6b\x60\x8e\xf4\x09\xa9\xed\x8c\xa7\x7e\xc5\x93\xf6\x09\x12\xb6\x31\x5c\x8f\x85\xef\xd9\x67\x5d\x5e\x0f\x6e\x3a\x91\xb8\x6a\xa9\x45\x61\x0b\x2e\x0d\xa9\xb8\x8b\x3b\xba\x14\x01\x20\x65\x47\x05\x45\x4c\xb6\xc3\x7b\x1b\x51\x72\x06\x09\xb6\x13\x84\x47\x07\x48\x2d\xe6\x1b\x74\xd7\xc8\x10\x67\x86\xd5\xa2\x74\xcd\x2e\xb5\x84\xeb\xe0\xec\x7b\xf7\x09\x35\x74\x6f\xc8\x0f\x4e\x79\xe2\x24\x5e\x56\x31\x9c\x76\x8f\x9c\x7c\x09\x25\xf5\x3c\xca\x95\xc7\x64\xf0\x95\xc7\x64\xc8\x93\xc7\xfa\xa5\xff\xa2\x23\xf5\x1e\x71\x6f\xc3\x39\x78\x8a\x12\xd7\xae\xa9\xdf\xcc\x49\xca\x14\xd0\xd7\x12\xdf\x43\x2f\x62\x48\xf5\xa5\xef\x1a\x38\x14\x36\x33\xa4\x07\x73\x15\x6a\xd1\x52\x61\x54\xba\x7c\xfd\xd6\x7f\x30\x58\x1b\xea\xb9\x57\x19\xf9\x7d\x52\xb5\x09\xf5\xd2\xbc\x18\xe2\x63\x11\x1f\x95\x9f\xb1\x6b\x1f\xec\x1f\x7d\x84\x25\xfa\xf1\x19\x70\xb7\x9f\x47\xcb\x5b\x5b\x9d\x9e\x48\x76\xa2\x9a\x6c\x21\xf3\x7f\xeb\xe8\x63\x6f\xcf\xcc\xd5\xbd\xe3\x99\x8f\xf4\xd2\x7b\x7b\xaf\xe4\xed\xf1\x8c\x09\x85\x26\xc8\xf1\xf5\x72\xf1\xfd\x93\xf3\xed\x7a\x3e\x3f\x70\xf2\x75\xc6\x8f\xe1\xf6\x87\x95\x07\xfe\x43\xb3\x3b\x87\x25\xbf\x0c\xdf\x80\x87\xc5\x37\x03\x22\x04\x51\x3e\x0c\x5f\x8e\xf7\x3d\xf9\xd2\x0e\xeb\x4f\x6f\x06\x8b\xd8\x6e\xe1\xd7\x8d\xbf\x47\x22\x01\x7c\xe4\xa3\xe0\x27\x7b\x47\xcc\xa1\xdd\x75\x44\x04\x68\xc1\xfd\xb0\x48\x23\x2a\x59\x59\x78\x68\xd9\x21\xe2\x88\x3e\x92\x92\x96\x1b\x3b\x23\x2f\x10\x6e\x3d\xc8\x8d\x39\x0f\x3f\x27\x2a\x2a\x51\xc5\x50\x70\x3d\x62\x2d\x25\xd8\xd0\x8e\xa5\x62\x2e\x05\x23\x84\x61\x64\xb5\x53\x8c\x07\xfb\x27\x5c\xc1\x23\xc0\xcc\x43\x07\xe6\x29\x73\xd8\x20\xce\xb9\x04\x5b\x20\x1f\x12\x69\x4c\x00\x25\x05\xe8\x86\xe8\x06\xe8\xe2\xbe\xf7\xf1\xce\x90\x3b\xbd\x23\x64\x12\x0c\xaf\xcd\xaf\x3c\x25\xc1\xa4\x75\x84\xf7\x97\x2a\xc1\x84\x0f\xf3\x7c\x7f\xa9\x92\x75\xc4\x40\x52\xed\xae\x65\x5a\xc1\xf7\x77\x4b\xc2\x43\x40\xa1\x5d\xd6\xbf\xe4\x74\x41\x0e\x4d\x79\x14\x22\xea\xce\xfa\xfd\xab\xf0\x50\xce\xcc\x4a\x12\x38\x74\xd7\x0c\x24\x5c\x22\xb2\x42\x33\xac\xd0\xf3\x5d\xa6\xd3\x63\x87\xd4\x32\x1c\xcd\x91\x60\x8e\x86\x2e\xdb\x9b\xb2\x5f\x32\x68\x8e\x7b\x94\x3e\xd7\x69\x5c\x32\x73\x0c\xa0\x5b\xf7\xd8\xcf\x8a\x4b\x60\xde\x6b\x19\x0d\xda\x11\x53\x50\xb9\x47\xee\x26\xd6\x3e\xf6\xfe\x56\x19\x34\x06\xde\x6c\x8c\xdc\x6e\x3f\xba\xeb\xdc\x5b\x0c\x0c\x1a\x12\x18\x04\xa3\x1c\x1e\x7c\x78\xaf\x8e\x50\x4b\xf0\x5b\xea\x71\x2d\x56\x28\xaf\x6c\x72\x78\xb1\xd1\xc3\x73\xe1\xf8\x38\x25\x9b\x85\xe0\x78\x11\x3d\x96\xb1\xa4\x9f\x38\xdd\xb0\xf7\x48\x44\x87\x38\x3d\x8c\x11\x15\xec\x20\xc2\xcc\xf7\xeb\x41\xcb\xd0\x4c\x7f\x63\x7f\xea\xe0\xbc\x7b\x70\x7f\xa3\xe9\x5e\x13\xcd\xf6\x1a\x18\x69\xa6\xe3\x8a\x4b\x70\x50\x48\x29\x70\x3d\x58\x80\x61\x47\xf4\xac\x75\x0d\x57\xfd\x64\xd7\x4e\x94\xb3\x5d\x4c\x13\x4d\x76\xce\x78\xf8\x47\xda\x94\x8f\x6d\x96\x04\x3c\x7b\x7a\x86\x03\x39\xc5\x7c\x8b\xf9\xf3\xe1\x41\xa4\x4a\x81\x93\xf3\x5b\xae\x3d\xf5\x59\x0f\xfe\x30\x43\x2f\xf8\x53\xfc\x3b\xb7\x97\x3e\x4f\xa5\x6e\x99\x75\x2f\xd4\x9e\xe0\x51\x49\x6f\x2e\x5e\x88\x67\xb0\x9d\x98\xc3\x17\x6f\x35\xdc\x4f\xbe\xb1\x09\x5e\x23\x63\xcd\x53\xdd\x4a\x6d\x8e\xee\x0d\xf0\xd4\xce\x96\x7d\x87\x6b\xae\x01\x46\xfd\x0c\xf6\xa9\xa5\xc3\xfc\x59\x02\x4d\x50\x23\x66\x00\xec\x1c\xb9\x86\x47\x10\xab\x32\x22\x83\xdd\x5d\x11\xa1\x4b\xd6\xf5\xec\x4f\x21\xa7\x7e\x90\x37\x5d\x11\x16\x6d\x2f\x1b\x81\x2e\x9c\xa3\x17\x1e\x83\x75\x20\x4c\xff\xba\x70\x18\xed\xe0\xe4\x6e\x91\xad\xc1\x00\xf7\x98\xe6\x79\xca\x9e\xbf\x47\xfe\x0e\x42\x71\x04\x39\x98\xa8\x7e\xdf\x8f\xac\xbb\x1f\x1c\xee\xa2\xb5\xbd\xea\x18\x9f\x26\xd4\xa0\x4d\x8c\xfa\x05\x9b\x01\x42\x5d\x6d\xba\x9d\x4c\x3d\xa4\x5f\x0c\x64\xbe\x75\x05\x75\xd9\x3e\x77\x91\x2b\x5a\x94\x47\x71\x88\x10\x32\xf3\x89\x9d\xbc\xf2\xc4\xc5\x7c\x55\xfd\x56\x82\xbb\xb1\x68\x4e\x4c\xe4\xbe\xc6\x88\xae\x5e\x4f\x8c\x96\xc8\x8c\xaf\xcc\xac\x92\x9c\x64\x20\x39\x50\xb1\xdc\xb1\x5e\xfa\xbc\x9b\x51\x9f\xfc\x15\x7c\x30\xf3\xc2\x08\x84\x3e\x99\x3d\xb2\xc6\xa9\xa9\xca\x7b\xd7\x06\xf6\x91\x4d\xb4\x96\xd8\x85\xca\xc1\x3c\xf8\xc6\x0e\x48\x22\xc2\x83\xbf\x02\x58\x85\xd8\x78\xbc\xfb\x10\xf6\xcd\x9e\xe1\xca\xdf\xec\x4b\xc7\xff\x19\x04\x90\x6d\x90\xc4\x69\xe2\x6b\xc9\x58\xb4\xa8\x69\xd8\x40\x69\x11\x83\xaa\x81\xd6\x62\x6b\x08\xb8\xa4\xfc\x12\x19\x7e\x2b\x28\x5d\x9c\x44\x25\xac\x2f\xda\x7c\x47\xc1\x53\x83\x21\x04\xfa\x18\x18\x21\x70\x75\xa5\xd5\x12\x2d\xa2\xb6\x20\x68\xd9\xf5\x7a\x7b\xc9\x55\x49\x46\x74\x5b\x55\x33\xf0\x6e\xe0\xdc\xfd\x62\xcc\xbd\x41\xe3\xde\x5a\xa1\x51\x28\x0a\x54\x5e\xc1\xbb\x23\xf7\x27\xcb\xb7\x80\x57\x3c\xab\x5f\xeb\x36\x70\x06\x07\x64\x86\xe0\xdf\xd8\xb3\x99\x03\x35\x9e\xa1\xb2\x4d\x68\x6d\x02\x3b\x34\x6b\xc5\x92\xb7\xf0\x84\xc2\x59\xfd\x14\x28\xcd\xe1\xe6\x89\x59\x3f\x33\x7b\xbb\x2c\xe4\x29\x0d\x73\xc4\xdf\x0e\xdf\x63\xc3\x56\xf7\x6e\x59\x4d\x3f\x75\xf8\x35\xbb\xa5\x3f\x89\x6a\x70\xc3\xd4\xa1\xca\xea\x7b\xbb\x22\x07\x7f\x0c\xa6\x7a\x32\xd6\x6d\xc1\x63\x1f\xcf\x5e\x13\xc9\xba\x38\x45\x91\xbb\xde\xb6\x07\xcd\x2e\xde\x31\x43\x40\x33\xc4\x4f\x0c\xbc\x7e\xf8\x5a\x6f\x02\xb9\x84\x85\x03\xb1\x08\x0d\xc2\x0f\xe3\xf7\xa7\x97\x45\x19\xe3\x1f\x7e\x75\xf3\x97\xeb\x04\xb4\x37\x83\x73\x9e\x40\xc2\x9a\xb7\xc3\x7d\xfc\x8b\xe1\xe6\x6f\x94\xf5\xe8\xf1\xd8\x93\xbf\x43\x82\x9e\x9c\x24\xfc\xa5\x4c\xa0\xf0\xbc\xf0\x9b\x2c\xd6\x91\x02\xc4\x21\x88\x4d\x56\x83\x25\x79\x9f\x44\x96\xa0\xec\xa2\x70\x32\xb5\xab\x86\x22\xa5\x1b\x51\x98\x22\x6d\x88\x2a\xef\x7d\x74\xa4\xb2\x20\xfb\x31\x33\xf3\xc7\x7c\x61\x0d\xc5\xca\xc1\xfe\x5e\x9e\x42\xfd\xec\x1e\x7c\x41\x92\x9b\x01\xb1\x95\xef\xf6\x50\x59\x78\x67\x9a\xec\xc5\x51\x09\x4c\x8c\x53\x95\x25\x91\x61\x0c\xe5\x78\xc1\x3e\x6f\x7f\xf6\x84\x4f\x64\xab\x44\xe5\x72\x7a\x65\xf8\x44\x2e\x0e\x7a\xf1\xe0\xb9\x09\xde\xcf\xb7\x2f\xca\xc9\x31\x8f\x5c\x9c\x36\x2b\x2f\xcb\x99\x01\x97\x28\x31\x03\xf3\xea\xcb\xbe\x7c\xe9\x2b\xd0\x2f\xd9\x71\x01\x66\x84\xfb\xbe\xf0\xab\x3f\x64\x05\x55\xf6\x66\xc3\x62\x46\x25\x02\x60\x10\xd7\x08\x3f\x18\xc8\xa7\xa6\x76\x89\x8c\xcb\x13\x5c\x94\x82\x9f\x1b\x95\xa3\x5f\xa2\xc0\x91\x88\x87\xac\xdb\xd7\x61\xe6\xa7\x37\xf6\xf1\x2f\xc3\x72\xec\xa4\xff\xdc\xeb\x8e\x55\x5d\x02\x35\x19\x88\xe9\x95\xc7\x39\x63\xb7\xe4\xef\xf3\xa5\x9c\xf3\x0b\x7e\x4e\xc3\x9c\x3d\xb2\xf2\xea\x94\x9d\x59\x22\x71\xfe\x79\xce\x2f\xaf\xf3\x73\x41\x96\xbd\xc5\xb0\xb0\x95\xc2\x20\x32\x48\xee\xf3\xcb\xe9\x7f\xbb\x4c\x08\x9f\x90\xcb\x27\xb2\xd6\x0f\x45\x02\x93\x11\x07\xa3\x61\x51\xa1\xbd\xee\x13\x8c\xec\x06\x6a\xd9\xcb\x30\xca\x37\x4a\x0b\x10\xf2\x53\x4b\x70\xc6\x61\x9f\x7b\xfd\xdf\x1a\x21\xc9\x8a\x13\x48\x08\x3e\x71\x7f\xe2\x4f\xb1\x6b\xf6\xb2\x9f\x13\x57\x03\x15\x90\x8a\x50\xb1\x3f\x91\x24\x0d\xf4\xdc\xa9\x41\x95\xac\xfe\x04\x62\x89\xfb\x5e\xf4\xd6\x8b\xb4\x98\x41\x11\x91\xae\x5c\x0d\x45\x6b\xaf\x50\x6e\x2f\xae\xc6\x52\x41\x68\x51\xec\x13\x75\x7c\x67\xb0\x31\x81\x6f\xb6\x75\x2a\x06\x81\x21\xd9\x57\x2d\x9f\xbc\x1a\x9a\x11\x35\xdf\x53\xc0\x78\x40\x0d\x24\xa6\xe0\x5a\xa0\xa0\xa7\x1f\x12\x75\x72\x81\xde\x3d\xf2\x46\xb2\xbf\x38\x7f\xf2\x26\xed\xbe\x3b\x76\xd5\xea\x22\xf1\x41\x65\x81\x4e\x8c\x14\x6c\xb2\x16\x9d\x5b\x60\xf0\xb8\xbe\x5f\x32\x4e\x1e\x2f\x71\xb4\x08\xe6\xf6\x42\xce\x93\x72\xaf\xc0\xbb\xb2\xdc\x75\x81\x3a\xe8\xca\xa7\xab\xbf\xdf\x0b\xf4\xd7\x73\x7c\xa8\xd7\x73\xb9\xdf\xdf\xd7\xc3\xee\x81\xc6\x2b\x2f\xf3\x1d\xcf\x82\xa2\x81\x22\x59\xe5\x3c\xfd\x42\xbd\xf2\xa7\x5b\xd8\xa5\xf6\xbd\x2b\x8e\xba\x57\xab\xcd\x45\x5f\xf3\xb2\x8b\x74\xd9\xb3\x05\x58\xbc\x56\xa8\x3b\xd2\x76\x50\x38\xac\x8f\xfd\x3f\xb3\x34\xf0\x09\xeb\xcb\xfe\xeb\x8f\xf6\xb7\x4a\x50\xef\xbe\x72\xb6\x6b\xc8\xa3\x66\xef\xb5\x6a\x46\x53\x8d\x7f\x1c\xf6\x7f\x7f\xa5\x38\x3d\x18\x62\x54\x34\xb3\x06\x1c\x98\xb2\xbc\x38\x61\x48\xde\xfe\x28\x79\x8e\x64\x5e\x8d\x71\x7a\x8d\xd7\xba\xed\xee\xbf\x58\xca\xa4\x28\xbe\xf7\x1a\x6e\x9f\x53\xd7\xd4\x66\x85\xfa\x68\xa5\x3e\x6b\x67\x3c\xa0\x70\x9c\xb1\xd6\x38\xef\xc8\xfb\x6f\x92\xab\xe2\x90\xa8\x37\x05\xde\xd2\x66\xe7\x7c\xfd\x94\x47\x3e\xda\x56\x41\xce\xc8\xb4\xb4\x57\xcf\x7b\xb1\xf7\xba\xf6\x5d\x8f\x5a\x53\x8f\xd0\xcd\x6a\xea\xf1\xd4\x93\xe7\xab\x8a\x1d\xff\x85\x78\x25\x87\xde\x7f\x8e\x57\xd3\xe3\x7f\xe1\x59\xde\xf6\x56\xf4\xb9\x37\x87\xf6\x4c\xb3\x9f\xb3\xd2\x1e\xe7\xfe\xa3\x5f\x45\x5a\x89\x1f\xf5\x46\x22\x3b\xf8\x91\xfe\xf3\xe9\x81\x7f\x93\xc7\x04\x23\x0f\xdc\xfe\x73\xee\xff\xb9\xff\xd4\xf0\x9c\x3c\xfb\xf1\x9c\xe3\x45\x3f\xfb\xcf\x50\xa2\x57\x0f\xe5\x0f\x7e\xae\xb9\xea\x1c\x45\x3f\x3d\x6a\x45\x3c\x1e\x5f\xbf\xf9\xd5\xd5\x25\xf8\xb6\x1a\x36\xdf\xeb\xc4\xc6\x67\xa6\x21\xc2\xde\x3f\xcb\x0b\xff\x92\xbc\x8a\x90\xe8\x5b\xc7\xcf\xe8\x1b\xd6\x04\xf9\xdf\xac\x09\xaf\xe8\x83\x27\xfa\x14\x3f\xf5\xd2\xc1\x60\xdd\x6f\x5b\x79\x3c\x2f\x72\x09\x4c\xf6\xfc\x73\x02\x66\xef\x9d\x86\xd2\x00\x58\x12\xfc\xd4\x30\x40\x6b\x65\x84\x97\xb1\x65\x60\x9d\x7b\x4d\xf2\x40\xba\x09\xa6\x13\xd6\x38\xf1\x04\x95\x10\xb9\xba\x94\xd1\x92\x7b\x9d\xbd\x66\x83\xf6\x44\xd1\x78\xf6\xff\x9c\x70\x8b\xd6\xe4\xff\x21\x4f\x60\x7e\xcb\xde\x50\xd5\xe0\xe3\xcf\xac\x64\xf6\xb5\x41\xe7\xde\x7b\x70\x7a\x4e\x4e\x3f\x92\xd3\x33\x70\x30\xe3\x40\xe1\xfc\x3b\xd6\xcf\xfb\xcd\x17\xf3\x5b\xa4\xcf\x5f\x25\xe8\xb0\xab\xe4\xa8\xfa\xe2\xfd\x81\xd6\xf2\xf0\xfe\xa8\x84\x65\x46\xd2\x95\x1e\x16\x17\x6a\x85\x82\x6b\x06\xbf\x09\xde\x2f\x7e\xfd\xd5\x08\x82\x2e\xf3\x63\x77\x91\x06\xc4\x9d\x88\x92\xf5\x73\xf6\x8d\x0f\x87\x67\xcd\x9e\xd6\xc8\xbf\xc6\xeb\xab\x0e\xb3\xd3\x9f\x19\xa3\xc1\xdd\xbf\x87\x6f\x9d\x84\x01\xee\x88\x05\x3a\x32\xba\xf7\x1e\xb9\x29\xaa\x1a\x8f\x0a\x25\x19\xdd\xbb\x2f\xf1\xf5\xcb\x8f\xaf\xbf\xfe\xfd\xf7\xdf\xfe\xf3\xf9\x8f\x14\x45\xc1\x7e\xf9\xf1\xf5\xf7\xff\xf8\xdb\x9f\xff\xfd\xd7\xdf\x7e\xfd\xdb\x3f\x62\xe4\x97\x1f\x5f\xe7\xe1\x0f\xff\xeb\x82\x63\xf2\x5f\x7e\xfd\xfd\xd7\xaf\x3f\xfd\xf8\xf2\x05\x1a\x65\xd3\xa8\xe7\xba\xf8\x5c\x21\xfc\x3d\xca\xa9\x7e\xae\x74\x3d\xd3\xf8\x7e\x65\x3e\xd7\xaf\x6b\xcd\xf7\x6e\x45\x6a\x54\x27\xff\xfd\xff\xfe\x27\x00\x00\xff\xff\x3d\x5e\x91\xaf\xff\x21\x00\x00")

func dataStub_flasherJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataStub_flasherJson,
		"data/stub_flasher.json",
	)
}

func dataStub_flasherJson() (*asset, error) {
	bytes, err := dataStub_flasherJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/stub_flasher.json", size: 8703, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/stub_flasher.json": dataStub_flasherJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"stub_flasher.json": &bintree{dataStub_flasherJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
