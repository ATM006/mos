// Code generated by go-bindata.
// sources:
// data/stub_flasher.json
// DO NOT EDIT!

package esp32

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataStub_flasherJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x79\xcb\xae\x2e\xb9\x6d\xf5\xfc\x7f\x8a\x83\x3d\xee\x01\x49\x91\x14\xe5\x19\x75\x7b\x0d\xa3\xf1\xdb\x43\x3b\x81\xdd\x19\x04\x41\xde\x3d\x20\x55\x55\x5f\xed\xd3\x8e\x9d\x7d\x80\xaf\x2e\x52\xe9\x42\x2e\x2e\x2e\xea\xfc\xd7\xd7\xff\xff\xb7\x3f\xfd\xf9\x8f\x7f\xff\xed\xd7\xbf\xfd\xf6\xf5\x87\x1f\x08\x95\x4b\x41\x15\xfa\xe5\x47\xb6\x7c\xfd\xe1\xc7\x17\x18\xc0\xe6\xb2\x01\x5e\xd7\x59\x36\x98\xc1\xf9\x3b\xd7\xbd\x6b\xb6\xe1\x38\xfd\xf0\xea\x5f\x94\x11\x60\xe0\x6e\x7b\x13\x6e\xdd\xbb\xe5\xbd\xe3\xb6\xbd\x07\x10\x00\x2c\x03\x6a\xde\x86\xbb\x8f\xa1\x30\xce\xb8\xd3\xc0\x4f\x3b\x19\x6c\xec\x65\x96\x06\x4e\xc4\x33\xdb\x1a\xf6\x39\x67\x83\x16\xfd\x5a\x2d\x13\x70\x34\x70\xe8\x66\x63\x0c\x1b\x0a\x25\x87\xe9\x66\x06\x06\x95\x37\xae\xba\x37\x76\xb3\xf8\x7a\xd6\xde\xc7\x34\x5c\x7e\xaf\x22\xba\x9d\x9e\x36\xd4\x3a\x2e\xdd\xfb\xee\x39\xbb\xe5\xf3\xb5\xde\x06\x86\x73\xc3\xf3\x87\x00\x67\x9f\x04\x0c\x9d\x8d\x1c\x0a\x89\x16\x86\x5a\xa0\xdd\x6f\x8a\xa8\x37\x50\x12\x1b\x00\xf9\x86\x8b\x13\xd9\xd8\xce\x8a\xf5\x0c\xe5\xe0\x83\x51\xa5\x2d\x00\x51\x75\xe0\x42\x61\xee\x02\x4e\x03\xc6\xd0\x02\x03\x8c\x15\xf1\x9e\xdc\x81\x61\xb3\x28\xf0\x5e\x8c\x6b\xed\x6d\x1a\xcb\x74\x70\xd8\xb2\xa4\x15\x80\x35\xd4\x19\x4a\x19\xd7\x38\xa5\x16\x5e\x8b\x6f\x1b\x3d\xf3\xba\x34\x07\x98\x83\xfd\x3d\xab\xe8\x2a\x7b\x81\x6e\xd8\xbb\x0c\x31\xd3\xdc\xf1\x50\x63\x8d\x6f\xcb\xa8\x46\xf3\xb2\x09\x1f\x3c\x10\x03\x40\xe3\xbc\x06\x0e\x34\x9e\xe3\xc5\x85\x8f\xf8\x3b\xb8\x81\xfd\x18\x11\x00\xea\x98\x0e\xc2\xb1\xe2\x0a\xc0\x00\xa6\x16\x57\x1e\x83\xe3\xda\xae\xf6\x0e\xa7\x7d\xf0\xb9\xee\xab\x3f\x8e\xd9\xa3\xbd\xa8\x21\x20\x93\x22\x15\x9f\x80\x97\x67\x70\xf3\xde\x2b\x41\x5b\x06\x89\xa8\x30\xce\x92\x6d\x65\x14\x11\x9d\x8c\x83\x24\xb0\xcc\x13\xbc\x0c\x16\xd1\xe2\x38\x2a\x3a\xee\xad\xf9\x2b\xe7\xde\xb5\xd6\x06\xaa\xb8\xe2\x9d\x4b\xed\x79\x37\x26\x54\x6f\x20\xd1\x0e\x43\x3c\xfa\x1c\xf4\x9c\x79\x0d\xe7\xbc\x91\xd4\x0c\xac\xc5\x1a\xa1\xe1\x1c\xcf\xdb\x06\xd6\x70\xf6\xbd\x8d\x1c\x23\xa4\xe2\xad\x5b\x76\x77\x82\x0b\xaf\x0d\x1a\x0d\x70\xcb\x9e\x67\xec\x80\x48\x9f\xc0\x4e\x03\xc5\x0c\x67\x7b\x66\x35\x10\x18\xd6\xa3\xa5\x5a\xd8\x05\x97\xc5\xef\x76\xe1\xc0\x23\x2c\x87\x92\x6f\x1a\x6b\xc4\xf9\x79\x43\xd0\x06\x63\xbc\x27\xcc\x95\x12\x41\x85\x2d\xa0\xd0\xd3\xa3\x38\xea\xde\x0c\x56\x06\x58\xed\x0d\x95\xc0\x0e\x1e\x0d\xd0\x27\xd4\x95\xd6\x14\x65\x47\x34\x6c\xbe\xb7\x39\x33\x5c\xd8\x73\x22\x24\x5a\x62\x1a\x7d\xaa\x23\x30\x4d\x46\xb0\x78\x5f\x44\xc5\x80\xea\xb5\x36\x42\xb4\x16\xef\xb1\x81\xd9\x80\x0a\xd5\x0c\x6a\xac\xd9\x5a\xf6\x39\x96\xa9\x44\x12\x76\xee\xbc\x77\xb6\xee\x0f\xd2\x73\x94\x65\x34\x0d\xc1\x6a\xe1\xb6\x58\x77\xb9\x2d\x5f\x0d\xa4\xd6\x6e\xbb\xbe\xe6\xd4\x6e\xa0\xd7\x8c\x5e\x2d\x47\xd4\x8a\xee\x7b\x07\xb2\xc2\xdf\x86\x3e\x6f\x4b\x9f\x95\xc4\x37\x89\x84\x09\x94\x76\x63\x95\xa0\xcc\x5c\x3f\xc7\x4e\xa1\xbd\xe6\xa8\x44\x93\x10\x7e\x9a\x25\xc6\x2d\xf7\xb8\xaf\x15\xd2\xac\xfb\x7e\x6e\x20\x86\x6d\xdf\xbd\xaa\x81\x46\x3b\x82\xd4\x5e\x81\x03\x7d\x90\xf1\x6a\xc8\xb6\xb7\xb5\x68\x0f\x1b\x04\x1a\x4e\xcf\x83\x89\x9c\x71\x91\x94\x91\x16\x44\x5c\x25\x46\x20\xd0\xbe\xf6\x3e\x48\x6b\xcf\x6a\x72\x1f\x40\x68\xbc\x77\x9f\x37\x46\x1b\x69\x30\x0f\x0d\x54\x33\xb4\xf5\xe0\x32\x77\x5a\x62\xd4\xc0\x6c\x2f\x40\x31\x60\xa2\x94\x12\x73\x10\x34\x23\x25\xf6\x99\xec\x55\x86\xc8\xc3\x33\xf2\xf0\x8c\xd0\x04\x09\x9e\x89\xf0\x8e\x3f\xb9\xae\xf5\xe2\x0f\x86\xe0\x3b\x4e\x3e\x26\x54\xdc\x33\x30\x30\x11\x01\x5d\x55\x1a\x68\xc3\x4a\x3b\xcc\xa7\x4a\xe1\x46\x19\x64\x5c\x7b\x03\x32\x0d\xdc\x78\xfa\x53\x1f\x8b\xb2\x62\xce\xae\x07\xe3\x20\xac\x65\x4c\x90\xd8\x75\x78\x57\xc5\x6a\x60\x77\x38\x68\x9f\x20\x81\x09\xc3\xf5\x7c\xff\xea\x1b\xe3\xda\xfd\x5e\x9c\x48\x5c\xb5\xd4\xa2\xb0\x25\x19\x02\x06\x77\x71\x47\x95\x12\xd9\x24\x62\x46\x21\xb9\x5e\x70\x71\xf0\x01\x05\x11\xb9\x88\x18\x88\x81\xe9\x00\xa9\xc5\x3a\x80\xee\x1a\x8c\x7a\x7a\x58\x2d\x4a\x57\xef\x52\x8b\x8d\xe1\xc9\x12\x7d\x42\x00\xd7\x0d\xe5\xe1\x0c\xc7\x19\x79\x71\x40\x3f\x2d\xf3\x59\x61\x64\x9a\x3b\x4e\x65\x94\x8b\xf7\x65\xf0\xc5\xfb\x32\xe4\xe1\xfd\x7e\xd9\xbf\xe8\x48\xbb\xb3\xee\x6d\xc3\x59\xc8\x41\x89\x6b\xd7\xb4\x6f\x72\xb8\x32\x81\xe0\x68\xc9\x9a\x61\x17\x31\x64\x7c\xd9\xbb\x06\x86\xc2\x67\x86\xe5\xc1\x90\x42\x2d\x5a\x2a\x8c\x4a\x80\xd0\x03\x7d\xc1\x1e\xa0\x52\x3b\x80\x0d\xf5\x9c\xab\x8c\x27\x97\x46\xfc\x5d\x96\x17\xc3\xf2\x70\xa1\x8f\xca\x4f\xdb\x3d\x8f\x7c\xec\x11\x9e\xe8\x07\x33\xe0\x6e\x3f\xb7\x96\xb7\xb5\x3a\x3d\x91\xe7\x44\x35\x73\x6c\xe6\xcb\xd6\xd1\x47\xe8\x9c\x60\xfb\xee\x1d\x4f\x7f\x1a\x2f\xbb\xb7\xf7\x48\xfe\xac\x4f\x26\x94\x1b\xe7\x00\xe5\xd1\x5d\x91\x23\xed\x7a\xde\x57\x06\x2d\xaa\x98\x9e\x22\xc3\xed\x7b\x53\x03\xa4\xbc\x8b\x74\x71\xe7\x0a\x6a\x60\x14\xd8\x80\x47\x51\x35\x03\x22\x0c\x5e\xa6\xbd\x0d\xb7\x1c\xf4\x7d\xf2\x92\x61\xf0\x62\xa2\x39\xd2\x51\xe4\x9b\xe0\xef\x27\x7f\x5e\x0a\x68\x58\xea\xc1\xcc\xb7\xd0\xc9\x21\x6c\x3a\x10\x91\x04\x7b\x60\x18\x3d\x3d\xbf\x00\x88\x7c\x07\x86\x21\x5a\x89\x11\xa1\xab\x19\xd0\x50\x0a\x8e\x48\x75\x48\x60\xe6\x40\x14\x6f\x1c\x72\x31\x70\xc6\x4d\x6f\x60\xf8\x1b\x33\x7b\x23\xa9\x9a\x8b\x77\x43\x74\x03\x5c\xd2\x4b\x68\x9f\x68\x0d\xab\x66\xd6\x97\xc0\x02\x67\x5f\x77\xe6\x61\x84\xaf\xfe\xa9\x95\x90\x7e\x37\xbe\x04\xb6\xe3\x9b\xee\xe4\xd3\x0a\xbe\xbf\x23\x09\x8f\x5a\xe6\xbf\xf7\x77\x2e\x58\x72\x8f\xa0\x18\xb3\xc1\x7c\xbe\x0a\x43\x03\x49\xe8\x4f\x53\x48\x25\x74\xf6\x6f\x0a\x0d\x60\xc9\xc6\x1d\x39\xea\xa3\xe9\x24\xd4\xa4\x67\x1f\x50\x90\x33\xee\x37\xfb\x5e\x23\xb8\x40\x5a\x36\x6c\xda\x2e\xd8\x63\x3f\x3d\x96\xc0\xbc\xdb\x8c\x06\x6d\x3f\xfa\xb6\x87\xbd\xc9\x34\x22\xf0\x9b\x8e\x6d\x0c\xbc\xd9\x18\xb9\xdd\x7e\x7d\xf4\xfe\x05\x40\x8c\x74\x1c\xb1\x0f\xa3\x1c\xbd\x76\xf4\x99\x8e\xd8\x38\xc3\x30\xea\x71\x2d\x56\x28\xaf\x6c\x72\xf4\x9b\xd1\xe1\x65\xcd\x5c\x14\xd8\x22\x8c\x7d\x43\x64\x96\x40\xad\x25\x86\xf5\x13\x1f\xa1\x37\x47\x32\x29\x84\x3f\x61\x8c\x01\x03\x06\x11\x1a\xf6\xb5\xd7\xc3\x52\xe1\xeb\xfe\xe6\xdc\xb4\xc1\x79\xf7\xf0\xc7\xc6\x8e\x7b\x4d\xec\x65\xaf\x81\xd6\xf6\xea\xb8\x22\xae\x43\x63\x41\xae\x02\xd7\x13\x83\x18\x59\x08\x1d\x57\x46\x47\x78\xee\xce\x64\x9d\x28\x7b\x7b\x6a\x16\xc7\xb9\xb3\xc7\x93\x19\xd3\x47\x7c\x30\xb1\x04\x1e\xcf\x3b\x90\x53\xf4\x8f\x2c\x9c\xac\x70\x8d\xa8\x4a\xc1\x4f\x73\xbc\x23\xeb\xd4\x13\x7d\x42\xa8\x57\x32\x24\xf9\x1e\x77\xce\xed\x65\x4f\x26\x0f\xb2\xce\x6c\x77\xb1\xe5\x04\xe7\xda\x7c\x73\xf1\x12\x35\x13\xd5\xec\xc3\x57\x7d\x65\x59\x7f\x5d\xda\x70\x82\xd7\xc8\x14\x33\x18\x74\x76\xa9\xcd\xd1\xbd\x01\xe6\xf3\x30\xdc\xf4\xd2\x91\x28\x15\x1d\x2c\xdb\x66\xde\x87\x9a\xe3\x1c\x47\x8d\x98\x01\xb0\x73\x70\x3c\x8f\x10\x20\x65\x44\xe6\xb8\xb0\x09\x42\xd7\x5a\xd7\x33\x3f\xc5\x3a\xf5\xc3\x78\x09\x45\x58\xb4\x3d\xea\x48\xba\xf8\x8f\x5e\x3c\x08\xd6\x81\x30\xf1\x75\xf1\x1f\xda\xe1\xa7\xa8\x2d\x83\xea\x00\xf7\x98\x76\xaa\xcc\x7e\x6a\xcd\xfc\x8d\x34\x7e\x16\x92\x1a\x9a\xd4\xef\xfb\x41\xda\xef\xfb\x66\xd0\x45\x6b\x7b\xe9\x74\x9f\x26\x14\xe5\x26\x86\x3e\xc7\x66\x80\x50\x57\x9b\x6e\x27\x43\x0e\xe9\x57\xe6\x9f\x6f\x5b\x41\x5d\xb6\xcf\x5d\x70\x74\x83\x72\xf6\x18\x8b\x4c\x1e\xb7\x72\xd5\xc9\x57\x5c\x3c\xb5\x41\x31\xb0\x02\x05\x42\x2d\x66\xc7\x64\xf5\xab\x2d\xf9\xf1\x6e\x2d\x91\x91\xbe\x65\xc4\xd4\x02\x03\xc9\x81\x8a\xe5\x8c\xf5\xb2\x27\x5c\x2a\xe9\x93\x37\x42\x7f\x25\xfb\x8e\x60\xdf\xf8\xde\x65\xf7\xc4\x28\xee\x5d\xde\xb3\x36\xb0\xcf\xda\x44\x6b\x89\x59\xa8\xb0\x1e\x9e\x7e\xaf\x81\x24\x22\xdc\x92\xf9\xac\x42\x4c\x3c\x80\x3e\xfe\xb5\x6f\xfe\x0c\x28\x7f\xf3\x2f\x1d\xfc\x33\x08\x20\xdb\x20\x89\xdd\xc4\xd7\x92\xb1\x68\xa1\xf0\xd9\x40\x69\x11\x83\x6a\x88\xde\x62\x6b\x08\xb8\xe4\xfa\x25\x32\xeb\x56\x50\xba\xb4\x80\x4a\x78\x5f\xb4\xf9\x9e\x86\x68\x79\x02\x81\x91\x25\x8d\x10\xb8\xba\xd2\x6a\xc9\x16\xa1\xc1\xa3\x1e\x5b\x4f\x3d\x76\x50\x52\xc0\x0b\x65\xdd\x0e\x56\x23\x6f\x79\x37\x70\xee\x7e\x9d\x52\xf4\x06\x8d\x7b\x6b\x85\x46\x21\x60\x1a\xbc\x42\xe5\x46\xce\x55\xc8\x7a\xaa\x31\xe0\x19\xfd\xa9\xe0\x9c\xc1\x01\x99\x81\x43\x1b\x77\x63\x83\x06\x35\x9e\xa1\xb2\x4d\x68\x2d\xaa\x39\x68\xd6\xca\xa9\xe6\x78\x42\xe1\xac\x12\x0a\x94\x28\xd6\x9f\xca\xc6\x0d\x98\xbd\x5d\x1e\xf2\x5c\x0d\x73\xc4\xdf\x0e\xec\xb1\x61\xab\x7b\x37\x9c\xfc\xae\x33\x6f\xdd\x1e\x78\x12\xd5\xd0\x64\x69\x43\x95\xd5\xf7\x76\x45\x8e\x4c\x11\x0a\xf1\x64\xa0\xdb\x83\xc7\x3f\x8e\x5d\xf6\x26\x59\x1e\x8a\xc9\xa1\xc8\x65\x25\xb4\x87\xcd\x8c\x28\xf2\xe2\x8c\x05\x9a\x65\xa9\x56\xbe\x65\x9d\x04\xe4\x35\xde\x04\xf2\x64\xcb\x60\x2c\x42\x83\xc0\x61\xfc\x3e\x08\x24\xca\x18\xff\xe8\x9a\xeb\xee\xde\x01\x45\x35\xea\x9c\x3b\x90\xf0\xe6\x0d\xb8\x0f\xbe\x18\x6e\xdd\x44\xd8\xe6\x8d\xfa\x25\xeb\xe8\x1d\x0a\x5d\xb8\x12\x2f\x65\x02\x05\xf2\x02\x37\xc0\x1c\xd9\x3f\x48\x1c\x08\x28\x18\x3e\x74\x5a\x64\x2e\x89\x2c\x41\xa8\x7d\x6f\x4e\x85\x74\xd6\xc4\x59\x0d\xdd\xf7\x91\x36\x44\x95\xf7\x3e\x36\x52\x59\x10\x5f\x05\x5f\x1c\xd6\x78\xb8\x86\x62\xe4\x3c\x1a\xf8\x20\x85\xfa\x99\x3d\xf2\xbf\x44\x96\x74\x20\xb6\xf2\xdd\x1f\x2a\x0b\xef\x4c\x23\xa9\xbc\x4a\x70\x62\xec\xaa\x2c\x89\x0c\x63\x28\x07\x05\xfb\xbc\xfd\x19\x09\x9f\xc8\x56\x89\x8a\x21\xc7\xbf\x62\x2f\x63\x7c\xd0\x4b\x7f\xce\x4d\xf0\x7e\xbe\xb1\x28\x27\xc7\x3c\xeb\xe2\xf4\x59\x79\x79\xce\x0c\xb8\x40\x89\x2a\x1c\x83\xad\x1e\xff\xf2\x65\xaf\x60\xbf\x54\xa5\x05\x98\x11\xee\xfb\xc2\xb7\x4d\x82\x8d\x0a\xaa\xec\xcd\x86\xc5\x8c\x4a\x04\xc0\x20\xae\x11\x7e\x30\x90\x59\x43\x1b\xb9\x44\xc6\xe5\x09\x2e\x1a\x02\x34\x7a\x1e\xfb\x12\x05\x8f\x44\x3c\x18\x36\xdd\xeb\x28\x62\x43\x5d\x6f\x7c\x19\x96\xe3\x27\xfd\xe7\xa8\x3b\x5e\x75\x09\xd6\x64\x20\xa6\x57\x1e\xe7\x8c\xdd\x92\xbf\xe7\x4b\x39\xfb\x17\xfc\xec\x86\x19\xa7\x66\x2f\xfd\xde\x4b\x24\xf6\x3f\xcf\xfe\xe5\xb5\x7f\x2e\xc8\xb2\x77\x14\x37\x6c\xa5\x30\x88\x0c\x92\x7b\xff\x62\x49\xf1\x2e\x13\x02\x13\x72\x61\x62\x6f\x8e\x88\x2c\xc1\x39\x46\x1c\x8a\x86\x45\x85\xf6\xba\x77\x30\x7a\xec\xb7\xf2\x5e\x86\x88\x11\x1f\xe1\x01\x42\xee\x0f\xb2\x33\x0e\xfb\xdc\xeb\x5f\x5b\x84\x24\x2b\x3d\x20\x21\xf8\xc4\xfd\x89\x3f\xc5\xae\x7b\x4b\xfe\x3e\xe7\x1b\x2a\x20\x15\xa1\xe6\xf9\xcd\x65\x87\x06\x7a\xee\xd4\xa0\x4a\x56\x5d\x02\x31\xc4\x7d\x2f\x7a\xdb\x45\x5a\xf4\xa0\x88\x48\x57\xae\x86\xa2\xb5\x57\x28\x37\x8a\xab\xb1\x54\x10\x5a\x14\xf3\x44\xfd\xdc\x19\x6c\x4c\xe0\x5b\x6d\x41\xda\x4d\x60\x08\x41\x81\x5e\x3e\x79\x35\x2c\x23\x6a\xbe\xa7\x80\xf1\x80\x1a\x4c\x4c\xa1\xb5\xf2\x94\x25\xcf\x21\xa2\x3e\x2d\xd0\xbb\x47\xde\x08\x4e\xcb\xfd\xa7\x6e\xd2\xee\xbb\x63\x57\xad\x2e\x12\x1f\x54\x16\xe8\xc4\x48\xa1\x26\x6b\xd1\xb9\x05\x06\x8f\xeb\xfb\x25\xe3\xe4\xf1\x12\x5b\x8b\x60\x6e\x2f\xe6\x3c\x29\xf7\x0a\xbc\x2b\xcb\x5d\x17\xa8\x83\xae\x7c\xba\xfa\xfb\xbd\x40\x7f\x3d\xc7\x87\x7a\x3d\x97\xfb\xfd\x7d\x3d\xea\x1e\x68\xbc\xf2\x32\xdf\xf1\x2c\x28\x79\x92\x1f\x8a\xfb\x89\x67\xd1\x2b\x7f\xba\x85\x5f\x6a\xdf\xbb\xe2\xa8\x7b\xb5\xda\x5c\xf4\xd5\x2f\x4f\x6f\x2e\x7f\xb6\x20\x8b\xd7\x08\x75\x47\xda\x0e\x09\x17\x08\xdc\x3f\xf7\xd2\xe0\xa7\x3c\xc1\xb9\xfd\xbf\x7e\xef\x7f\xab\x04\xf5\x3e\x93\xca\x63\x12\xf2\xa8\x95\x7b\xad\x9a\xd1\x54\xe3\x1f\x87\xff\xdf\x5f\x29\x4e\x0f\x85\x18\x15\xcd\xac\x2b\x6b\x24\x96\x97\x26\x8c\x95\xb7\xdf\xaf\x3c\x5b\x32\xaf\x46\x3b\xbd\xda\x6b\xdd\x76\x9f\x7b\x58\xae\x49\x51\x7c\xef\x35\xdc\x3e\xbb\xae\x69\xcd\x0a\xf5\xb1\x4a\x7d\xc6\xce\x78\x40\xe1\xd8\x63\xad\xb1\xdf\x91\xf7\xdf\x56\xae\x8a\x43\xf6\x1e\x2a\xf0\x5e\xad\xc5\x9a\xd6\x4f\x79\xe4\x63\x6d\x15\xe4\x8c\x4c\x4b\x7f\xf5\xbc\x17\x7b\x8f\x6b\xdf\xed\xa8\x35\xed\x08\xdd\xac\xa6\x1d\x4f\x3d\x79\xbe\xaa\x51\x5f\xfd\xeb\x78\x25\x87\xde\x7f\x8e\x57\xd3\x83\xbf\x40\x96\xb7\x3c\x67\x9f\x7b\x73\x58\xcf\x34\xcf\x51\x56\xfa\xe3\xdc\x7f\xec\xab\x48\x2b\xf9\xa3\xde\x4c\x64\x87\x3f\x12\x3f\x34\xfe\xe1\x7a\x4c\x30\xf2\xc0\x8d\x9f\x73\xff\xcf\xf1\x53\x03\x39\xb9\xf7\x83\x9c\x83\xa2\x9f\xf1\x33\x94\x9e\x7c\xff\x8f\x70\xae\x39\xea\x1c\x45\x3f\x67\xb9\x8a\x78\x10\x5f\xbf\xe1\xea\x3a\x5d\xff\x36\x1a\x36\xdf\xeb\xc4\xc6\xa7\xa7\x21\xc2\xde\x3f\xaf\x17\xfe\x4f\xeb\x55\x84\x64\xdf\x3a\x7e\x66\xdf\xf0\x26\xc8\xff\xe6\x4d\x78\x45\x1f\x3c\xd1\xa7\xf8\xa9\x97\x0e\x07\xeb\x7e\xfb\xca\xe3\x79\x91\x4b\x70\xb2\x6b\x2a\x99\x3c\xa3\xa6\xa1\x34\x00\x96\x84\x3e\x35\x0c\xd2\x5a\x19\xe1\x65\x6c\x19\x58\xe7\x5e\x93\x3c\x98\x6e\x82\xe9\x84\x35\x4e\x3c\x41\x25\x44\xae\x2e\x65\xb4\xd4\x5e\x67\xae\xd9\xa0\x3d\x51\x34\x9e\xf9\x3f\x3b\xdc\xa2\x35\xea\xf1\x5c\x4f\x70\x7e\xcb\x53\x9c\xaa\xa1\xc7\x9f\x5e\xa9\xec\x6b\x83\xce\xbd\xf7\xd0\xf4\x9c\x9a\x7e\xa4\xa6\x67\xe0\x50\xc6\xc1\xc2\x28\x1f\xeb\x3d\xf3\xcd\x97\xf2\x5b\xa4\xcf\xe9\x3d\x1d\x75\x95\x1a\x55\x5f\xba\x3f\xd8\x5a\x1e\xdd\x1f\x95\xb0\xcc\x48\xba\xd2\xc3\xe3\x42\xad\x50\x68\xcd\xd0\x37\xa1\xfb\xc5\xaf\x53\x72\x08\xb9\xcc\x8f\xdf\x45\x1a\x10\x77\x22\x4a\xd5\x7f\x4e\x94\x8e\x86\x67\x0d\xed\x01\x03\xa2\xce\xd6\x57\x1d\x66\xe7\x7c\x66\x8c\x06\xf7\xb9\x39\x7c\x3b\x49\x18\xe0\x8e\x58\xa0\x23\xa3\x7b\xef\x91\x9b\xa2\xaa\xf1\xa8\x50\x52\xd1\xbd\xcf\x25\xbe\x7e\xf9\xf1\xf5\xe7\xbf\xfe\xf6\xb7\xff\x7c\xfe\x43\x39\x6a\xd5\x5f\x7e\x7c\xfd\xf5\x3f\xfe\xf2\xc7\x7f\xff\xf5\x6f\xbf\xfe\xe5\xef\xd1\xf2\xcb\x8f\xaf\xf3\xf0\xbb\xff\x7d\xe6\xe8\xfc\xa7\x5f\x7f\xfb\xf5\xeb\x0f\x3f\xbe\xb8\x82\x44\xd9\x24\xfb\x5c\xeb\xf5\xdc\xca\xb9\x76\xbd\xae\x57\xfb\xb0\xef\xd7\xaf\x6b\xac\xf7\x2c\x45\x6a\x6d\x4d\xff\xfb\xff\xfd\x4f\x00\x00\x00\xff\xff\x47\xda\xc4\x27\xff\x1e\x00\x00")

func dataStub_flasherJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataStub_flasherJson,
		"data/stub_flasher.json",
	)
}

func dataStub_flasherJson() (*asset, error) {
	bytes, err := dataStub_flasherJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/stub_flasher.json", size: 7935, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/stub_flasher.json": dataStub_flasherJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"stub_flasher.json": &bintree{dataStub_flasherJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
