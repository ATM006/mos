// Code generated by go-bindata.
// sources:
// data/stub_flasher.json
// DO NOT EDIT!

package esp32

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataStub_flasherJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x58\xcd\xae\x2d\x27\xae\x9e\xdf\xa7\xd8\xda\xe3\x33\xf8\x6c\xc0\x98\xcc\x8c\x29\xbf\x46\x74\x74\x93\x61\x72\xaf\x92\xd3\x83\x56\xab\xdf\xbd\x65\xea\x67\xad\x9d\xa8\x6b\xb0\xa8\xc2\xc6\x80\xfd\xf1\xd9\xac\x7f\x7d\xfe\xef\xff\xfd\xf2\xeb\xcf\x7f\xfe\xf8\xfe\xc7\x8f\xcf\x9f\x3e\x08\xbd\x96\x42\xd2\xf8\xdb\xc7\x96\x7c\xfe\xf4\xf1\x09\x05\xa2\x96\x00\xde\xda\x55\x02\xaa\x38\x9f\xb3\x8d\xe8\x5b\x46\x7e\xea\xd1\xa5\x5f\xa4\x12\xe0\x14\x23\x82\x29\x24\x62\xec\x77\xa3\xd0\x08\x07\x03\x38\x14\x3c\x6c\xb8\x99\xb9\x0b\xfc\xb4\xbb\x14\x76\xca\x59\x11\x34\xcb\x2a\x03\xc6\x5c\xd7\x96\x0d\x9a\x6b\xad\x81\x91\x7a\xa3\x97\x05\xf2\x01\xc3\x54\x75\x77\x75\x41\xd9\x66\xa6\xaa\x42\xd1\x6b\xd0\xd1\x23\x68\xaa\xe6\xe8\xd5\xe7\xf4\xa5\x74\xd8\xbd\x8a\x54\x3b\x35\xd5\x45\x27\x1d\x12\x71\x6b\xae\xa9\xfb\xfb\x5a\xef\x80\xd2\x0a\x3c\x4f\xee\xd0\xd9\x21\x15\xf5\x6a\xcf\x7d\x33\x2a\x66\x55\x36\x14\x6e\xd2\x2b\x7a\xc1\xb8\x7b\x4a\x93\x63\x40\xa4\x49\x00\xbb\xa7\x16\x63\x1e\xce\x56\x85\x2e\xf7\x1a\xcc\x2b\x29\x45\x8d\x38\xb6\xb3\x9b\x74\x43\x2d\x9c\x41\x28\x30\x76\xb8\x97\x02\x87\xaa\x10\xe5\x88\x8a\xa8\x4d\x50\xe3\xa8\x74\x78\x44\xdd\xbe\x30\x18\xa2\xe9\xee\x39\x2d\x1d\xde\xad\xa2\x14\xbf\xec\x94\x5e\xea\x31\x1f\xed\x3d\xef\xd1\x6e\xed\xe5\xcd\xde\x67\x6d\x32\x4b\x1c\x90\x40\x04\x50\xbc\xa9\x4a\x7a\xa2\xb8\x68\x95\x5c\x7b\xf1\xae\xbc\x2e\x5f\xd5\x73\x43\x5c\x01\x8c\xba\xdb\xc4\x87\xe4\x77\x76\x5c\xb8\xc9\xe7\xc4\x13\xe2\x71\x2e\x80\xee\xcb\xd0\x2a\x0e\x97\x0e\x54\x40\x45\xb3\xad\xee\x35\xdb\x71\xc9\x1b\x78\xa5\xff\x27\x4e\x3d\xaf\x67\x1b\xd7\x38\xf2\x35\x53\xaf\x88\x12\xa8\xb2\x10\x17\x5b\xa0\x2b\x52\x14\xe5\xde\x6f\x71\x6e\x4d\x56\xa5\x55\xb6\xac\x78\x69\x4d\x5a\xa5\x75\x34\x21\xa0\x2e\x58\xf1\xda\x9a\x4c\x23\xef\x34\x56\x84\xec\xdf\x76\xbe\x9b\xf4\x9e\xf1\xa5\x03\x11\xcd\x5a\x9f\xfb\xcd\x17\xba\x0d\xb4\x94\xc3\x9b\xa5\xce\xbb\x9f\x95\x96\xdf\x48\x1b\x0a\x1d\xb9\x46\x0c\x5a\xf3\xe9\x1d\xd0\x41\xcb\x22\x94\x8d\xf2\xc8\x65\xaf\xe9\x56\x37\xc6\x85\xe7\x81\xc1\x0e\xd3\xad\x79\xda\x4e\xb0\xcc\x85\x6a\xec\xd4\x54\x69\xe9\x33\xab\xa2\xc1\x75\xa6\xa4\x6b\xfa\x85\x0e\xcd\xdf\x90\x96\x27\x4e\x71\x18\xca\xee\x19\x75\x63\xfb\xec\x61\x8c\xc4\x49\xae\x91\xf6\x4a\x99\xd1\x11\xed\x3e\xc7\x83\x5c\x22\x2a\xb4\x38\xb4\xcf\x41\xc6\xd0\x8d\xcf\xaa\xa0\x0e\xeb\x0c\xa5\x31\x5e\xe8\x56\x23\x52\x1a\x2d\x42\xad\xd6\xfb\x1c\x1b\x33\x31\x2b\x8d\xf2\x45\x13\x95\x57\x25\x68\x4a\xcb\xe1\xac\xfd\x5a\x27\x13\xe9\xc8\x5e\x1a\x50\x75\x74\xeb\xda\x73\xf5\x3a\xb6\xc6\xe9\xa3\xae\x68\x4a\x93\x23\xb6\xec\x3a\x29\x9b\xd5\xd2\xc2\xa1\xbc\x94\xa0\xbd\xd4\x61\x2e\x89\x8d\xd7\xb8\xde\xa7\x46\x7f\x9b\x4f\xa6\x42\xfe\x32\x9b\x74\x32\x8d\x48\x84\x65\xdc\x95\x6c\xde\xeb\x3f\xd7\x91\x63\x52\xc2\xb9\x43\x6c\x0f\x56\x25\xeb\x8f\x56\xee\xa1\xee\x33\x3f\xde\xe6\xea\xcc\x8b\x09\x7f\x99\x2d\xed\xd3\x3d\xf2\x6d\xa5\xbc\x7a\xdc\xdf\x23\x77\x9c\xf8\x3c\xb5\xba\x42\x52\x4e\x68\x7d\x76\xd4\x44\x23\xf6\x39\x56\xaa\x1c\xa1\x23\xe5\xe9\x8b\x44\xc7\xa9\x79\x62\x64\xcf\x78\x48\x2b\x0e\x9c\x1a\x25\x2d\x30\x64\x7a\xc4\x89\xbc\x41\x5f\xf6\x01\x4e\x26\x8b\xb9\x6e\xcc\x0e\x16\xc6\xb6\x27\xaa\xa4\x0f\x33\xf1\xde\x69\x49\xab\x89\xe1\x59\xc0\x69\x70\xa3\x96\x37\x06\xe1\x68\xd6\x4a\xee\x53\xd2\x54\xf1\xd6\x1e\xfe\x69\x0f\xff\x34\x5e\x68\xc9\x3f\x79\xdc\xf3\x69\x57\xdb\x2f\x5e\x59\xca\xc7\xe6\x6d\x8c\x92\xfc\x90\xbc\xcd\x24\x14\x9e\x98\x58\x44\x20\x13\x69\x03\x32\x48\x8e\x48\x37\x8a\x70\x86\xb5\x39\x6b\xed\x73\x80\x55\x58\x00\xdb\xf1\x95\x27\xbe\x55\xa8\xe7\x0c\x72\x62\x1f\xad\x4a\xf1\x85\x36\x37\xdb\x64\xb4\x95\x92\x3b\x6f\x34\xbb\x41\xe6\x42\x4b\xac\x28\x1d\xc7\x13\xc7\x6b\xcc\x65\xff\x85\x7f\x63\x6e\x26\x52\x7a\x11\x44\xa3\xa3\xe6\xea\xea\x6c\x66\xc4\xad\x64\xf6\x91\x6a\x24\xd8\x59\xa1\xd1\x91\xd1\x64\xee\x64\x64\xad\xb5\x44\x3e\x54\x1c\xad\x17\x35\x87\x44\x8f\x9d\x87\x52\x43\x7b\x11\xbe\xb4\x4b\x2f\xea\x6e\xb4\xc6\x8e\x5c\x27\x33\x53\x6a\x0f\x42\x8d\x56\x8b\x20\xc7\x3c\x25\xeb\x91\x64\x4e\xc2\x75\xa2\x9a\x97\x2b\x3f\x34\xaf\x57\x7e\x68\xde\x9e\xfc\x30\xaf\x78\x14\xf1\xed\xff\x4a\x11\xea\x56\x1b\x1b\x84\x6b\x9f\xb2\xfd\xbc\xb9\x5e\x2a\xa3\x91\xf7\xcd\xaa\xe9\x97\xa6\x54\xfc\xab\xdf\x6d\xc7\x4e\xa9\x3c\xcc\x22\xe8\x65\x47\xa0\x5f\xde\x64\x25\x7f\xfc\xaf\x2e\xb6\xe7\x2a\x7e\xc5\x6d\x7b\xfe\xd6\xcd\x19\x9e\x0c\x6c\xde\xeb\x23\xbb\xe7\xc1\xcb\x1f\x59\x29\xcc\x13\x3b\x30\xd3\x94\xd2\x9b\xb4\xbc\x7b\x6b\x3e\x92\x6e\xcc\x7d\x67\xe3\x26\x47\x89\x91\x0a\x59\x27\xad\x15\x31\x6d\xd2\xa9\xcf\xfa\xe6\xf7\xf1\x6e\xc9\x1e\x49\x5b\x28\x37\xee\x81\xf2\xd4\x6d\x99\x4b\xf5\xfa\x8e\x2b\xd3\x16\xc9\x5c\x96\xe4\xa0\x14\x16\xc1\x03\xc4\xfb\x2d\xd3\xc9\x9d\x4b\x78\x40\x39\xb1\x81\xa7\x22\x1b\x0a\x66\x42\x93\xcd\x12\x14\xed\x44\xdf\x2b\x6f\x9d\xb9\x74\xa3\x39\xd3\x55\xe6\x23\x7a\xe7\xef\xab\x82\x72\xdd\xf5\x24\xd5\xbb\x6e\xca\x03\x3a\xd9\x90\xbe\x75\x22\xca\x10\x27\x96\xc9\x36\x02\x02\x60\xb6\x48\x2c\x83\x88\x98\x2b\x11\xa6\xa8\x82\x5d\x78\x00\xbc\xd7\xc2\x50\x35\x30\x73\x7a\x0a\x7b\x51\x38\xed\xee\xa8\x10\xe3\x68\x19\xe7\xe2\xc4\x22\x6a\xcd\xa6\x12\x99\x82\xb8\x65\x3e\xa8\x42\x63\x57\xb3\x33\x77\x60\x8d\x04\xa8\x5b\xd7\x32\x2b\x29\xd3\xad\x6f\x6d\xae\xad\x5f\xfe\x66\xbf\x26\xc6\x73\xcc\x34\xb6\xa5\x85\xbe\x8e\x5b\x67\x6d\xe6\x5f\xc7\x71\x4b\x4b\x9c\x58\xa4\x9c\x0d\xeb\x19\x95\x0e\xc7\xd1\x12\x5f\x55\xd0\x76\x3d\xb5\xf7\xaf\x92\x9b\xb4\x16\x14\x01\xb9\x77\xbb\x6b\x89\xa7\xae\xb0\xad\xf9\x1a\x67\xf8\xe2\xe7\xcb\xd2\xd1\xb0\x52\x9a\xbe\x1d\xd7\x31\xa0\x79\x69\xbc\xc9\x94\x9d\xc3\xce\x7a\x79\x0a\x6b\xc6\xc6\x35\xe2\x4b\x5d\x3c\x2a\x6a\x54\xad\x54\xc7\x1d\xe7\xe7\xfe\x70\x01\x92\xc0\xfb\xb4\x35\x78\x39\xeb\xbc\xb3\xae\x13\x4f\x07\x54\x14\x2d\xbc\xdb\xaa\xed\xac\xf7\x94\x4f\x9e\x96\x9d\xa3\xb2\x2e\x66\x0a\xde\xcc\x6c\x89\xb1\xbd\x16\x8a\x37\x7e\x4a\xaf\xf8\xe6\x5a\x64\x3c\xe1\xee\x70\x38\x67\x36\x9a\x1a\xc7\xc3\x56\x73\xc2\xe6\x57\x5e\x0e\xb2\x23\x8e\x45\x59\x42\x39\x29\xc7\x31\xe9\xc8\x93\x96\x95\x17\x6c\x7b\x51\xe9\x78\x58\x9f\xd2\xfb\x64\xbb\x9e\x53\x3a\xc6\x2b\xa3\x4d\xe6\x9c\xc3\xa4\xd1\xc9\x03\xfb\xdc\xbc\xea\xbe\x1d\x8b\x7a\x63\x27\xe9\xd0\x5a\xde\x58\x0c\x6c\x9c\xa7\x7d\xa6\xfe\x8a\xc7\xa2\x08\x27\x2f\xad\xe3\xfd\x44\x9d\xf7\x8e\xb9\x50\x4e\x86\xe3\xf6\xf5\xbc\x59\x1d\x6f\xfe\xab\x6c\x49\xd2\x14\x4f\x3d\x20\x0b\x56\xfb\xb0\xa8\xc5\x4a\xde\xb5\xb8\x6f\x9d\x7a\xd5\x73\xba\xef\x6d\x17\x67\x2e\x58\xcf\x0c\xb1\x92\x39\xd7\x6c\x7d\x18\x99\x0d\xd0\xfe\x76\xdd\x71\x79\xea\x4b\x6a\x9d\x0c\xba\x65\x6b\xbf\x57\xc8\x2e\xe5\x17\x44\xb9\x56\x80\x66\x4d\x6e\xaf\x9e\x85\x48\xf1\xcc\x18\x17\x06\xd1\xf8\x5a\xeb\xf1\xcc\xcf\xb9\x4e\x79\x31\xdd\xc6\x96\xf2\xc9\x6f\x5a\xde\xee\x9f\x63\xef\xf0\xb9\xe7\x25\x3d\x81\x77\x0d\xba\xef\xa3\xf6\xdf\x64\x2f\xbb\x04\xbe\x78\x94\xdf\xf8\xf4\xba\xfc\xee\x4d\xbc\xfa\xeb\xae\x2f\x0e\x0e\x2b\x51\x95\x33\x61\x21\xf2\xdc\xc8\xed\x77\x69\x31\x2f\x6e\xdc\x95\xc6\x8d\x40\xe2\xac\x6a\x21\x25\x79\x28\xc3\x0e\x06\x17\xc2\xc9\xca\x47\x44\x48\xcb\xdb\x73\xd9\xb8\x3b\xd7\x5c\x76\x0d\xa5\x74\xac\x88\xb2\x7f\x9f\xfe\xa7\x0a\x2c\x0a\x6d\xd2\x9f\xfa\xb5\x28\x18\xfd\x28\xab\xf3\xf6\xe7\x8b\xe5\xff\xaa\xcf\x37\x92\xdb\xdb\x9d\x84\x6d\x57\x1b\xfb\x72\xf2\xba\x6d\xf0\x3c\x57\x8d\x5d\xbf\x3c\x91\x37\x70\xd1\x72\x7b\x52\xf5\x3c\xc7\xee\x03\x77\xbd\x85\x2f\x08\x74\x98\x11\x15\x4c\xaa\x64\x36\x67\xc1\x9c\xce\x0c\xcb\x9b\xf9\xfe\xef\xe0\x1d\xcf\x9f\xdf\x3e\x3e\x7f\xfd\xfd\xc7\x1f\xff\x7c\xfe\xc0\x28\x2c\xf5\xdb\xc7\xe7\xef\xff\xf8\xed\xe7\xff\xff\xfe\xc7\xf7\xdf\xfe\x4c\xc9\xb7\x8f\xcf\xf3\xe3\x6f\xff\x76\x54\xfd\xf6\xf1\xf9\xcb\xf7\x1f\xdf\x3f\x7f\xfa\xf8\x94\x89\x96\xac\xa5\xe5\x6c\xc7\xf5\x3d\xfb\xd9\xe6\x1d\x33\xdb\xe3\x92\x07\xbe\xb6\x9f\x97\xad\xf7\x59\x4a\xeb\x7d\x0c\xf9\xf7\xff\xfc\x27\x00\x00\xff\xff\x63\x32\x5d\x67\x6f\x11\x00\x00")

func dataStub_flasherJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataStub_flasherJson,
		"data/stub_flasher.json",
	)
}

func dataStub_flasherJson() (*asset, error) {
	bytes, err := dataStub_flasherJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/stub_flasher.json", size: 4463, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/stub_flasher.json": dataStub_flasherJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"stub_flasher.json": &bintree{dataStub_flasherJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

