// Code generated by clubbygen.
// GENERATED FILE DO NOT EDIT
// +build !clubby_strict

package sys

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"

	"cesanta.com/common/go/mgrpc"
	"cesanta.com/common/go/mgrpc/frame"
	"cesanta.com/common/go/ourjson"
	"cesanta.com/common/go/ourtrace"
	"github.com/cesanta/errors"
	"golang.org/x/net/trace"
)

var _ = bytes.MinRead
var _ = fmt.Errorf
var emptyMessage = ourjson.RawMessage{}
var _ = ourtrace.New
var _ = trace.New

const ServiceID = "http://mongoose-iot.com/fwSys"

type GetInfoResultWifi struct {
	Ssid   *string `json:"ssid,omitempty"`
	Sta_ip *string `json:"sta_ip,omitempty"`
	Status *string `json:"status,omitempty"`
}

type GetInfoResult struct {
	App          *string            `json:"app,omitempty"`
	Arch         *string            `json:"arch,omitempty"`
	Fs_free      *int64             `json:"fs_free,omitempty"`
	Fs_size      *int64             `json:"fs_size,omitempty"`
	Fw_id        *string            `json:"fw_id,omitempty"`
	Fw_version   *string            `json:"fw_version,omitempty"`
	Mac          *string            `json:"mac,omitempty"`
	Ram_free     *int64             `json:"ram_free,omitempty"`
	Ram_min_free *int64             `json:"ram_min_free,omitempty"`
	Ram_size     *int64             `json:"ram_size,omitempty"`
	Uptime       *int64             `json:"uptime,omitempty"`
	Wifi         *GetInfoResultWifi `json:"wifi,omitempty"`
}

type RebootArgs struct {
	Delay_ms *int64 `json:"delay_ms,omitempty"`
}

type SetDebugArgs struct {
	Level        *int64  `json:"level,omitempty"`
	Udp_log_addr *string `json:"udp_log_addr,omitempty"`
}

type Service interface {
	GetInfo(ctx context.Context) (*GetInfoResult, error)
	Reboot(ctx context.Context, args *RebootArgs) error
	SetDebug(ctx context.Context, args *SetDebugArgs) error
}

type Instance interface {
	Call(context.Context, string, *frame.Command, mgrpc.GetCredsCallback) (*frame.Response, error)
}

func NewClient(i Instance, addr string, getCreds mgrpc.GetCredsCallback) Service {
	return &_Client{i: i, addr: addr, getCreds: getCreds}
}

type _Client struct {
	i        Instance
	addr     string
	getCreds mgrpc.GetCredsCallback
}

func (c *_Client) GetInfo(ctx context.Context) (res *GetInfoResult, err error) {
	cmd := &frame.Command{
		Cmd: "Sys.GetInfo",
	}
	resp, err := c.i.Call(ctx, c.addr, cmd, c.getCreds)
	if err != nil {
		return nil, errors.Trace(err)
	}
	if resp.Status != 0 {
		return nil, errors.Trace(&mgrpc.ErrorResponse{Status: resp.Status, Msg: resp.StatusMsg})
	}

	var r *GetInfoResult
	err = resp.Response.UnmarshalInto(&r)
	if err != nil {
		return nil, errors.Annotatef(err, "unmarshaling response")
	}
	return r, nil
}

func (c *_Client) Reboot(ctx context.Context, args *RebootArgs) (err error) {
	cmd := &frame.Command{
		Cmd: "Sys.Reboot",
	}

	cmd.Args = ourjson.DelayMarshaling(args)
	resp, err := c.i.Call(ctx, c.addr, cmd, c.getCreds)
	if err != nil {
		return errors.Trace(err)
	}
	if resp.Status != 0 {
		return errors.Trace(&mgrpc.ErrorResponse{Status: resp.Status, Msg: resp.StatusMsg})
	}
	return nil
}

func (c *_Client) SetDebug(ctx context.Context, args *SetDebugArgs) (err error) {
	cmd := &frame.Command{
		Cmd: "Sys.SetDebug",
	}

	cmd.Args = ourjson.DelayMarshaling(args)
	resp, err := c.i.Call(ctx, c.addr, cmd, c.getCreds)
	if err != nil {
		return errors.Trace(err)
	}
	if resp.Status != 0 {
		return errors.Trace(&mgrpc.ErrorResponse{Status: resp.Status, Msg: resp.StatusMsg})
	}
	return nil
}

//func RegisterService(i *clubby.Instance, impl Service) error {
//s := &_Server{impl}
//i.RegisterCommandHandler("Sys.GetInfo", s.GetInfo)
//i.RegisterCommandHandler("Sys.Reboot", s.Reboot)
//i.RegisterCommandHandler("Sys.SetDebug", s.SetDebug)
//i.RegisterService(ServiceID, _ServiceDefinition)
//return nil
//}

type _Server struct {
	impl Service
}

func (s *_Server) GetInfo(ctx context.Context, src string, cmd *frame.Command) (interface{}, error) {
	return s.impl.GetInfo(ctx)
}

func (s *_Server) Reboot(ctx context.Context, src string, cmd *frame.Command) (interface{}, error) {
	var args RebootArgs
	if len(cmd.Args) > 0 {
		if err := cmd.Args.UnmarshalInto(&args); err != nil {
			return nil, errors.Annotatef(err, "unmarshaling args")
		}
	}
	return nil, s.impl.Reboot(ctx, &args)
}

func (s *_Server) SetDebug(ctx context.Context, src string, cmd *frame.Command) (interface{}, error) {
	var args SetDebugArgs
	if len(cmd.Args) > 0 {
		if err := cmd.Args.UnmarshalInto(&args); err != nil {
			return nil, errors.Annotatef(err, "unmarshaling args")
		}
	}
	return nil, s.impl.SetDebug(ctx, &args)
}

var _ServiceDefinition = json.RawMessage([]byte(`{
  "methods": {
    "GetInfo": {
      "doc": "Get device information",
      "result": {
        "properties": {
          "app": {
            "doc": "Application name",
            "type": "string"
          },
          "arch": {
            "doc": "Platform name",
            "type": "string"
          },
          "fs_free": {
            "doc": "Filesystem free bytes",
            "type": "integer"
          },
          "fs_size": {
            "doc": "Filesystem size",
            "type": "integer"
          },
          "fw_id": {
            "doc": "Firmware build ID",
            "type": "string"
          },
          "fw_version": {
            "doc": "Firmware version",
            "type": "string"
          },
          "mac": {
            "doc": "Device MAC address",
            "type": "string"
          },
          "ram_free": {
            "doc": "Heap free",
            "type": "integer"
          },
          "ram_min_free": {
            "doc": "Minimum value of ram_free since boot",
            "type": "integer"
          },
          "ram_size": {
            "doc": "Heap size",
            "type": "integer"
          },
          "uptime": {
            "doc": "Time since boot, in seconds",
            "type": "integer"
          },
          "wifi": {
            "doc": "WiFi status",
            "properties": {
              "ssid": {
                "doc": "SSID of the AP connected to",
                "type": "string"
              },
              "sta_ip": {
                "doc": "IP of the station",
                "type": "string"
              },
              "status": {
                "doc": "Status of the WiFi station connection",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      }
    },
    "Reboot": {
      "args": {
        "delay_ms": {
          "doc": "Optional delay, in milliseconds. Default is 100.",
          "type": "integer"
        }
      },
      "doc": "Reboot the device"
    },
    "SetDebug": {
      "args": {
        "level": {
          "doc": "Log level",
          "type": "integer"
        },
        "udp_log_addr": {
          "doc": "IP_ADDRESS:PORT string to send UDP logs to",
          "type": "string"
        }
      },
      "doc": "Set debug log parameters"
    }
  },
  "name": "Sys",
  "namespace": "http://mongoose-iot.com/fw"
}`))
